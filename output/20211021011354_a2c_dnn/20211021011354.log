Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
Creating converter from 7 to 5
Creating converter from 5 to 7
Creating converter from 7 to 5
Creating converter from 5 to 7
matplotlib data path: /opt/homebrew/Caskroom/miniforge/base/envs/ho/lib/python3.9/site-packages/matplotlib/mpl-data
CONFIGDIR=/Users/ho/.matplotlib
matplotlib version 3.4.3
interactive is False
platform is darwin
loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'posix', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'posixpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'google', 'google.logging', 'mpl_toolkits', 'site', 'token', 'tokenize', 'linecache', 'traceback', '_weakrefset', 'weakref', '_string', 'string', 'threading', 'atexit', 'logging', 'gettext', 'argparse', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'locale', 'errno', 'signal', 'pwd', 'grp', '_posixsubprocess', 'select', 'math', 'selectors', 'subprocess', 'platform', 'settings', '_datetime', 'datetime', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'textwrap', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pathlib', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numbers', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', '_ast', 'ast', '_ctypes', 'ctypes._endian', 'ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', '_decimal', 'decimal', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'cython_runtime', '_cython_0_29_24', 'numpy.random._common', 'binascii', 'base64', '_hashlib', '_blake2', 'hashlib', 'hmac', '_bisect', 'bisect', '_random', '_sha512', 'random', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'utils', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'dateutil._version', 'dateutil', 'mmap', 'pandas._typing', '__future__', '_opcode', 'opcode', 'dis', 'inspect', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'six', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'calendar', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'dateutil._common', 'dateutil.relativedelta', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', '_csv', 'csv', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'unicodedata', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'gc', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'copy', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'dataclasses', 'gzip', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pprint', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'tempfile', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'sklearn._config', 'sklearn._distributor_init', 'sklearn.__check_build._check_build', 'sklearn.__check_build', 'pkgutil', 'timeit', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy', 'scipy._lib._util', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', '_cython_0_29_23', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'sklearn.utils.murmurhash', 'sysconfig', '_sysconfigdata__darwin_darwin', '_osx_support', 'pydoc', 'joblib.hashing', 'multiprocessing.process', '_socket', 'array', 'socket', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'multiprocessing.util', 'joblib.disk', 'joblib.logger', 'joblib.func_inspect', 'distutils', 'distutils.version', 'joblib.backports', 'joblib.compressor', 'joblib.numpy_pickle_utils', 'joblib.numpy_pickle_compat', 'joblib.numpy_pickle', 'joblib._store_backends', 'joblib.memory', '_uuid', 'uuid', '_queue', 'queue', '_multiprocessing', 'joblib._multiprocessing_helpers', 'joblib._deprecated_my_exceptions', 'joblib.my_exceptions', 'joblib.externals', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', 'joblib.externals.loky._base', 'multiprocessing.connection', 'joblib.externals.loky.backend.compat_posix', 'joblib.externals.loky.backend.compat', 'joblib.externals.loky.backend.process', 'joblib.externals.loky.backend.context', 'multiprocessing.synchronize', 'joblib.externals.loky.backend', 'joblib.externals.loky.backend._posix_reduction', 'joblib.externals.cloudpickle.compat', 'typing_extensions', 'joblib.externals.cloudpickle.cloudpickle', 'joblib.externals.cloudpickle.cloudpickle_fast', 'joblib.externals.cloudpickle', 'joblib.externals.loky.backend.reduction', 'multiprocessing.queues', 'joblib.externals.loky.backend.queues', 'joblib.externals.loky.backend.utils', 'concurrent.futures.process', 'joblib.externals.loky.process_executor', 'joblib.externals.loky.reusable_executor', 'joblib.externals.loky.cloudpickle_wrapper', 'joblib.externals.loky', 'runpy', 'joblib.externals.loky.backend.spawn', 'joblib.externals.loky.backend.resource_tracker', 'joblib._memmapping_reducer', 'multiprocessing.pool', 'joblib.pool', 'joblib.executor', 'joblib._parallel_backends', 'joblib.parallel', 'joblib', 'scipy.spatial.ckdtree', 'scipy.spatial.kdtree', 'scipy._lib.messagestream', 'scipy.spatial.qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy._lib.decorator', 'scipy.spatial._plotutils', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.spatial._distance_pybind', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.optimize.minpack2', 'scipy.optimize.linesearch', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize.optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'unittest.util', 'unittest.result', 'difflib', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize.lbfgsb', 'scipy.optimize.moduleTNC', 'scipy.optimize.tnc', 'scipy.optimize._cobyla', 'scipy.optimize.cobyla', 'scipy.optimize._slsqp', 'scipy.optimize.slsqp', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize.minpack', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize.zeros', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._highs', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._linprog_highs', 'scipy.linalg._interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg.interpolative', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog_doc', 'scipy.optimize._linprog', 'scipy.optimize._lsap_module', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.optimize', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate.odepack', 'scipy.integrate._quadpack', 'scipy.integrate.quadpack', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc', 'scipy.stats._constants', 'scipy.stats._distn_infrastructure', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate.fitpack', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.interpolate', 'scipy.interpolate.rbf', 'scipy.interpolate._rbfinterp_pythran', 'scipy.interpolate._rbfinterp', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._rvs_sampling', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'beta_ufunc', 'scipy.stats._boost.beta_ufunc', 'binom_ufunc', 'scipy.stats._boost.binom_ufunc', 'nbinom_ufunc', 'scipy.stats._boost.nbinom_ufunc', 'scipy.stats._boost', 'scipy.stats._continuous_distns', 'scipy.stats.biasedurn', 'scipy.stats._discrete_distns', 'scipy.stats._entropy', 'scipy.stats.distributions', 'scipy._lib._bunch', 'scipy.stats._stats_mstats_common', 'scipy.stats.mstats_basic', 'scipy.stats._wilcoxon_data', 'scipy.stats._hypotests', 'scipy.stats.stats', 'scipy.stats.statlib', 'scipy.stats._common', 'scipy.stats._relative_risk', 'scipy.stats._crosstab', 'scipy.stats.contingency', 'scipy.stats.morestats', 'scipy.stats._binomtest', 'scipy.stats._binned_statistic', 'scipy.stats.mvn', 'scipy.stats.kde', 'scipy.stats.mstats_extras', 'scipy.stats.mstats', 'scipy.stats._sobol', 'scipy.stats._qmc_cy', 'scipy.stats._qmc', 'scipy.stats.qmc', 'scipy.stats._multivariate', 'scipy.stats._bootstrap', 'scipy.stats._page_trend_test', 'scipy.stats._mannwhitneyu', 'scipy.stats', 'sklearn.utils.deprecation', 'xml', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'email', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging._typing', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'pkg_resources', 'sklearn.utils.fixes', 'sklearn.exceptions', 'sklearn.utils.validation', 'sklearn.utils.class_weight', 'sklearn.utils._joblib', 'html.entities', 'html', 'sklearn.utils._estimator_html_repr', 'sklearn.utils', 'sklearn.utils._tags', 'sklearn.base', 'sklearn.utils._openmp_helpers', 'sklearn.utils._show_versions', 'sklearn', 'sklearn.preprocessing._function_transformer', 'sklearn.utils._logistic_sigmoid', 'sklearn.utils.sparsefuncs_fast', 'sklearn.utils.extmath', 'sklearn.utils.sparsefuncs', 'sklearn.preprocessing._csr_polynomial_expansion', 'sklearn.utils._encode', 'sklearn.preprocessing._encoders', 'sklearn.preprocessing._data', 'sklearn.utils.multiclass', 'sklearn.preprocessing._label', 'sklearn.preprocessing._discretization', 'sklearn.preprocessing', 'data_manager', 'agent', 'learners', 'tqdm._monitor', 'tqdm._tqdm_pandas', 'tqdm.utils', 'tqdm.std', 'tqdm._dist_ver', 'tqdm.version', 'tqdm.cli', 'tqdm.gui', 'tqdm', 'environment', 'tensorflow.python.eager', 'absl', 'termios', 'getpass', 'getopt', 'fcntl', 'absl.flags._helpers', 'absl.flags._argument_parser', 'absl.flags._exceptions', 'absl._collections_abc', 'absl.flags._flag', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'absl.flags._flagvalues', 'absl.flags._validators', 'absl.flags._defines', 'absl.flags', 'absl.logging.converter', 'absl.logging', 'tensorflow.core', 'tensorflow.core.framework', 'google.protobuf', 'google.protobuf.internal', 'google.protobuf.internal._api_implementation', 'google.protobuf.internal.api_implementation', 'google.protobuf.pyext', 'google.protobuf.internal.containers', 'google.protobuf.internal.enum_type_wrapper', 'google.protobuf.message', 'google.protobuf.pyext._message', 'google.protobuf.descriptor', 'google.protobuf.descriptor_database', 'google.protobuf.text_encoding', 'google.protobuf.descriptor_pool', 'google.protobuf.pyext.cpp_message', 'google.protobuf.message_factory', 'google.protobuf.symbol_database', 'google.protobuf.reflection', 'google.protobuf.internal.well_known_types', 'tensorflow.core.framework.tensor_shape_pb2', 'tensorflow.core.framework.types_pb2', 'tensorflow.core.framework.resource_handle_pb2', 'tensorflow.core.framework.tensor_pb2', 'tensorflow.core.framework.attr_value_pb2', 'tensorflow.core.framework.node_def_pb2', 'tensorflow.core.framework.op_def_pb2', 'tensorflow.core.framework.function_pb2', 'tensorflow.core.protobuf', 'tensorflow.core.framework.cost_graph_pb2', 'tensorflow.core.framework.versions_pb2', 'tensorflow.core.framework.graph_pb2', 'tensorflow.core.framework.allocation_description_pb2', 'tensorflow.core.framework.tensor_description_pb2', 'tensorflow.core.framework.step_stats_pb2', 'tensorflow.core.protobuf.cluster_pb2', 'tensorflow.core.protobuf.debug_pb2', 'tensorflow.core.protobuf.verifier_config_pb2', 'tensorflow.core.protobuf.rewriter_config_pb2', 'tensorflow.core.protobuf.config_pb2', 'tensorflow.python.platform', 'tensorflow.python.platform.build_info', 'tensorflow.python.platform.self_check', 'tensorflow.python._pywrap_tensorflow_internal', 'tensorflow.python.pywrap_tensorflow', 'tensorflow.python._pywrap_tfe', 'tensorflow.python.pywrap_tfe', 'tensorflow.python.platform._pywrap_tf2', 'tensorflow.python.util', 'tensorflow.python.util.tf_decorator', 'tensorflow.python.util.tf_inspect', 'tensorflow.python.util.tf_export', 'tensorflow.python.tf2', 'tensorflow.python.client', 'tensorflow.python._pywrap_tf_session', 'tensorflow.python.client.pywrap_tf_session', 'tensorflow.python.eager.executor', 'tensorflow.core.framework.summary_pb2', 'tensorflow.python.framework', 'tensorflow.core.framework.api_def_pb2', 'tensorflow.python.util.compat', 'tensorflow.python.util.tf_contextlib', 'tensorflow.python.framework.c_api_util', 'tensorflow.python.eager.monitoring', 'tensorflow.python.framework.device_spec', 'tensorflow.python.framework.device', 'tensorflow.python.framework.tfrt_utils', 'tensorflow.python.util.is_in_graph_mode', 'tensorflow.python.platform.tf_logging', 'tensorflow.python.util.decorator_utils', 'tensorflow.tools', 'tensorflow.tools.docs', 'tensorflow.tools.docs.doc_controls', 'tensorflow.python.util.deprecation', 'tensorflow.python.eager.context', 'tensorflow.python.data.experimental.ops', 'tensorflow.python.data.util', 'wrapt._wrappers', 'wrapt.wrappers', 'wrapt.decorators', 'wrapt.importer', 'wrapt', 'tensorflow.python.util._pywrap_utils', 'tensorflow.python.util._pywrap_nest', 'tensorflow.python.util.nest', 'tensorflow.python.framework.composite_tensor', 'encodings.raw_unicode_escape', 'encodings.unicode_escape', 'google.protobuf.internal.wire_format', 'google.protobuf.internal.encoder', 'google.protobuf.internal.decoder', 'google.protobuf.internal.type_checkers', 'google.protobuf.text_format', 'tensorflow.core.lib', 'tensorflow.core.lib.core', 'tensorflow.core.protobuf.error_codes_pb2', 'tensorflow.core.lib.core.error_codes_pb2', 'tensorflow.python._pywrap_py_exception_registry', 'tensorflow.core.protobuf.graph_debug_info_pb2', 'tensorflow.python.framework.error_interpolation', 'tensorflow.python.framework.errors_impl', 'tensorflow.python.framework.errors', 'tensorflow.python.eager.core', 'tensorflow.python._dtypes', 'tensorflow.python.lib', 'tensorflow.python.lib.core', 'tensorflow.python.lib.core._pywrap_bfloat16', 'tensorflow.python.framework.dtypes', 'cmd', 'bdb', 'codeop', 'code', 'glob', 'pdb', 'absl.command_name', 'faulthandler', 'absl.app', 'tensorflow.python.util.lazy_loader', 'tensorflow.python.eager.tape', 'tensorflow.python.framework.cpp_shape_inference_pb2', 'tensorflow.python.framework.tensor_conversion_registry', 'tensorflow.python.framework.tensor_shape', 'tensorflow.python.framework.type_spec', 'tensorflow.python.types', 'tensorflow.python.types.internal', 'tensorflow.python.framework.indexed_slices', 'tensorflow.python.framework.registry', 'tensorflow.python.framework.traceable_stack', 'tensorflow.python.framework.versions', 'tensorflow.python.ops', 'tensorflow.python.ops.control_flow_util', 'tensorflow.python.profiler', 'tensorflow.python.profiler.internal', 'tensorflow.python.profiler.internal._pywrap_traceme', 'tensorflow.python.profiler.trace', 'tensorflow.python.types.doc_typealias', 'tensorflow.python.types.core', 'tensorflow.python.util.dispatch', 'tensorflow.python.util.function_utils', 'tensorflow.python.util.lock_util', 'tensorflow.python.util.memory', 'tensorflow.python.util.object_identity', 'tensorflow.python.util._tf_stack', 'tensorflow.python.util.tf_stack', 'tensorflow.python.framework.ops', 'tensorflow.python.eager.execute', 'tensorflow.python.framework.op_callbacks', 'tensorflow.python.framework.fast_tensor_util', 'tensorflow.python.framework.tensor_util', 'tensorflow.python.framework.constant_op', 'tensorflow.python.framework.common_shapes', 'tensorflow.python.framework.tensor_spec', 'tensorflow.python._op_def_registry', 'tensorflow.python.framework.op_def_registry', 'tensorflow.python.framework.op_def_library', 'tensorflow.python.ops.gen_sparse_ops', 'tensorflow.python.framework.sparse_tensor', 'tensorflow.python.data.util.nest', 'tensorflow.python.ops.gen_array_ops', 'tensorflow.python.ops.gen_math_ops', 'tensorflow.python.ops.array_ops', 'tensorflow.python.ops.gen_control_flow_ops', 'tensorflow.python.ops.gen_data_flow_ops', 'tensorflow.python.ops.gen_list_ops', 'tensorflow.python.ops.handle_data_util', 'tensorflow.python.ops.list_ops', 'tensorflow.python._proto_comparators', 'tensorflow.python.framework.graph_util_impl', 'tensorflow.python.framework.graph_util', 'tensorflow.python.ops.gen_bitwise_ops', 'tensorflow.python.ops.gen_nn_ops', 'tensorflow.python.ops.math_ops', 'tensorflow.python.util.tf_should_use', 'tensorflow.python.ops.tensor_array_ops', 'tensorflow.python.ops.ragged', 'tensorflow.python.ops.session_ops', 'tensorflow.python.training', 'tensorflow.python.training.experimental', 'tensorflow.python.training.experimental.mixed_precision_global_state', 'tensorflow.python.client.session', 'tensorflow.core.protobuf.control_flow_pb2', 'tensorflow.python.ops.gen_functional_ops', 'tensorflow.python.ops.gen_logging_ops', 'tensorflow.python.ops.control_flow_ops', 'tensorflow.python.ops.check_ops', 'tensorflow.python.ops.gen_ragged_conversion_ops', 'tensorflow.python.ops.ragged.ragged_config', 'tensorflow.python.ops.ragged.ragged_tensor_value', 'tensorflow.python.ops.gen_ragged_math_ops', 'tensorflow.python.ops.ragged.ragged_util', 'tensorflow.python.ops.ragged.segment_id_ops', 'tensorflow.python.ops.ragged.row_partition', 'tensorflow.python.ops.ragged.ragged_tensor', 'tensorflow.python.data.util.structure', 'tensorflow.python.ops.gen_experimental_dataset_ops', 'tensorflow.python.data.experimental.ops.compression_ops', 'tensorflow.core.framework.dataset_options_pb2', 'tensorflow.python.data.util.options', 'tensorflow.python.data.experimental.ops.distribute_options', 'tensorflow.python.data.experimental.service._pywrap_utils', 'tensorflow.python.data.ops', 'tensorflow.python.compat', 'tensorflow.python.compat.compat', 'tensorflow.python.data.experimental.ops.optimization_options', 'tensorflow.python._pywrap_events_writer', 'tensorflow.python.lib.io', 'tensorflow.python.lib.io._pywrap_file_io', 'tensorflow.python.lib.io.file_io', 'tensorflow.python.platform.gfile', 'tensorflow.python.profiler.internal._pywrap_profiler', 'tensorflow.python.eager.profiler', 'tensorflow.python.framework.smart_cond', 'tensorflow.python.ops.gen_summary_ops', 'tensorflow.core.framework.variable_pb2', 'tensorflow.python.framework.auto_control_deps_utils', 'tensorflow.python.ops.gen_resource_variable_ops', 'tensorflow.python.ops.gen_state_ops', 'tensorflow.python.ops.state_ops', 'tensorflow.python.training.tracking', 'tensorflow.python.ops.gen_io_ops', 'tensorflow.python.training.saving', 'tensorflow.python.training.saving.saveable_object', 'tensorflow.python.training.tracking.base', 'tensorflow.python.ops.variables', 'tensorflow.python.ops.resource_variable_ops', 'tensorflow.python.ops.summary_op_util', 'tensorflow.python.framework.graph_io', 'tensorflow.python.ops.gen_linalg_ops', 'tensorflow.python.ops.linalg_ops_impl', 'tensorflow.python.framework.random_seed', 'tensorflow.python.ops.gen_random_ops', 'tensorflow.python.ops.gen_stateless_random_ops', 'tensorflow.python.ops.gen_stateless_random_ops_v2', 'tensorflow.python.ops.stateless_random_ops', 'tensorflow.python.ops.random_ops', 'tensorflow.python.ops.init_ops', 'tensorflow.python.ops.variable_scope', 'tensorflow.python.training.training_util', 'tensorflow.python.ops.summary_ops_v2', 'tensorflow.python.data.experimental.ops.stats_aggregator', 'tensorflow.python.data.experimental.ops.stats_options', 'tensorflow.python.data.experimental.ops.threading_options', 'tensorflow.python.ops.gen_dataset_ops', 'tensorflow.python.data.ops.optional_ops', 'google.protobuf.any_pb2', 'tensorflow.core.protobuf.struct_pb2', 'tensorflow.core.protobuf.trackable_object_graph_pb2', 'tensorflow.core.protobuf.saved_object_graph_pb2', 'tensorflow.core.protobuf.saver_pb2', 'tensorflow.core.protobuf.meta_graph_pb2', 'tensorflow.python.framework.graph_to_function_def', 'tensorflow.python.framework.function', 'tensorflow.python.framework.importer', 'tensorflow.python.framework.meta_graph', 'tensorflow.python.lib.io._pywrap_record_io', 'tensorflow.python.lib.io.tf_record', 'tensorflow.python.lib.io.python_io', 'tensorflow.python.ops.io_ops', 'tensorflow.python.ops.gen_parsing_ops', 'tensorflow.python.ops.gen_string_ops', 'tensorflow.python.ops.string_ops', 'tensorflow.python.training.checkpoint_state_pb2', 'tensorflow.python.training.checkpoint_management', 'tensorflow.python.util._pywrap_checkpoint_reader', 'tensorflow.python.training.py_checkpoint_reader', 'tensorflow.python.distribute', 'tensorflow.python.distribute.parallel_device', 'tensorflow.python._pywrap_parallel_device', 'tensorflow.python.util._pywrap_tensor_float_32_execution', 'tensorflow.python.framework.config', 'tensorflow.python.distribute.device_util', 'tensorflow.python.distribute.parallel_device.saving', 'tensorflow.python.tpu', 'tensorflow.python.tpu.ops', 'tensorflow.python.ops.gen_tpu_ops', 'tensorflow.python.tpu.tpu_function', 'tensorflow.python.tpu.ops.tpu_ops', 'tensorflow.python.distribute.parallel_device.parallel_device', 'tensorflow.python.eager.backprop_util', 'tensorflow.python.ops.unconnected_gradients', 'tensorflow.python.eager.imperative_grad', 'tensorflow.python.ops.default_gradient', 'tensorflow.python.eager.backprop', 'tensorflow.python.eager.forwardprop_util', 'tensorflow.python.eager.graph_only_ops', 'tensorflow.python.framework.auto_control_deps', 'tensorflow.python.ops.op_selector', 'tensorflow.python.ops.custom_gradient', 'tensorflow.python.framework.func_graph', 'tensorflow.python.ops.functional_ops', 'tensorflow.python.ops.control_flow_v2_func_graphs', 'tensorflow.python.ops.control_flow_state', 'tensorflow.python.ops.gradients_util', 'tensorflow.python.saved_model', 'tensorflow.python.saved_model.save_context', 'tensorflow.python.eager.function', 'tensorflow.python.eager.lift_to_graph', 'tensorflow.python.eager.def_function', 'tensorflow.python.training.saving.saveable_object_util', 'tensorflow.python.training.saver', 'tensorflow.python.data.ops.iterator_ops', 'tensorflow.python.data.util.convert', 'tensorflow.python.data.util.random_seed', 'tensorflow.python.data.util.traverse', 'tensorflow.python.lib.core._pywrap_py_func', 'tensorflow.python.ops.gen_script_ops', 'tensorflow.python.ops.script_ops', 'tensorflow.python.saved_model.revived_types', 'tensorflow.python.training.tracking.layer_utils', 'tensorflow.python.training.tracking.data_structures', 'tensorflow.python.training.tracking.tracking', 'tensorflow.python.data.ops.dataset_ops', 'tensorflow.python.data.experimental.ops.data_service_ops', 'tensorflow.core.protobuf.service_config_pb2', 'tensorflow.python.data.experimental.service._pywrap_server_lib', 'tensorflow.python.data.experimental.service.server_lib', 'tensorflow.python.data.experimental.service', 'tensorflow.python.data.experimental.ops.batching', 'tensorflow.python.data.experimental.ops.cardinality', 'tensorflow.python.data.experimental.ops.scan_ops', 'tensorflow.python.data.experimental.ops.counter', 'tensorflow.python.data.experimental.ops.distribute', 'tensorflow.python.data.experimental.ops.enumerate_ops', 'tensorflow.python.data.experimental.ops.error_ops', 'tensorflow.python.data.experimental.ops.get_single_element', 'tensorflow.python.data.experimental.ops.grouping', 'tensorflow.python.data.experimental.ops.random_ops', 'tensorflow.python.data.ops.readers', 'tensorflow.python.data.experimental.ops.interleave_ops', 'tensorflow.python.data.experimental.ops.io', 'tensorflow.core.util', 'tensorflow.core.util.event_pb2', 'tensorflow.python.client.timeline', 'tensorflow.python.training.session_run_hook', 'tensorflow.python.summary', 'tensorflow.python.summary.summary_iterator', 'tensorflow.python.summary.writer', 'tensorflow.python.summary.plugin_asset', 'tensorflow.python.summary.writer.event_file_writer', 'tensorflow.python.summary.writer.event_file_writer_v2', 'tensorflow.python.summary.writer.writer', 'tensorflow.python.summary.writer.writer_cache', 'tensorflow.python.training.summary_io', 'tensorflow.python.training.basic_session_run_hooks', 'tensorflow.python.data.experimental.ops.iterator_ops', 'opt_einsum.parser', 'opt_einsum.helpers', 'opt_einsum.blas', 'opt_einsum.paths', 'opt_einsum.path_random', 'opt_einsum.sharing', 'opt_einsum.backends.cupy', 'opt_einsum.backends.object_arrays', 'opt_einsum.backends.jax', 'opt_einsum.backends.tensorflow', 'opt_einsum.backends.theano', 'opt_einsum.backends.torch', 'opt_einsum.backends.dispatch', 'opt_einsum.backends', 'opt_einsum.contract', 'opt_einsum._version', 'opt_einsum', 'tensorflow.compiler', 'tensorflow.compiler.tf2xla', 'tensorflow.compiler.tf2xla.ops', 'tensorflow.compiler.tf2xla.ops.gen_xla_ops', 'tensorflow.python.ops.gen_special_math_ops', 'tensorflow.python.ops.special_math_ops', 'tensorflow.python.ops.sparse_ops', 'tensorflow.python.ops.ragged.ragged_functional_ops', 'tensorflow.python.ops.ragged.ragged_math_ops', 'tensorflow.python.ops.parsing_config', 'tensorflow.python.ops.parsing_ops', 'tensorflow.python.data.experimental.ops.parsing_ops', 'tensorflow.python.data.experimental.ops.prefetching_ops', 'tensorflow.python.data.experimental.ops.readers', 'tensorflow.python.ops.logging_ops', 'tensorflow.python.data.experimental.ops.resampling', 'tensorflow.python.data.experimental.ops.shuffle_ops', 'tensorflow.python.data.experimental.ops.snapshot', 'tensorflow.python.data.experimental.ops.stats_ops', 'tensorflow.python.data.experimental.ops.take_while_ops', 'tensorflow.python.data.experimental.ops.unique', 'tensorflow.python.data.experimental.ops.writers', 'tensorflow.python.util.all_util', 'tensorflow.python.data.experimental', 'tensorflow.python.data', 'tensorflow.python.distribute.distribution_strategy_context', 'tensorflow.python.training.checkpoint_utils', 'tensorflow.python.saved_model.constants', 'tensorflow.python.autograph.utils.context_managers', 'tensorflow.python.autograph.utils.misc', 'tensorflow.python.autograph.utils.py_func', 'tensorflow.python.autograph.utils.tensor_list', 'tensorflow.python.autograph.utils', 'tensorflow.python.autograph.utils.tensors', 'tensorflow.python.platform.device_context', 'tensorflow.python.ops.nn_ops', 'tensorflow.python.ops.sort_ops', 'tensorflow.python.autograph.operators.py_builtins', 'tensorflow.python.autograph.operators.variables', 'tensorflow.python.autograph.utils.ag_logging', 'tensorflow.python.types.distribute', 'tensorflow.python.autograph.operators.control_flow', 'tensorflow.python.autograph.operators.conditional_expressions', 'tensorflow.python.autograph.operators.data_structures', 'tensorflow.python.autograph.operators.exceptions', 'tensorflow.python.autograph.operators.logical', 'tensorflow.python.autograph.operators.slices', 'tensorflow.python.autograph.operators', 'tensorflow.python.autograph.core', 'tensorflow.python.autograph.pyct', 'gast.astn', 'gast.ast3', 'gast.gast', 'gast', 'tensorflow.python.autograph.pyct.anno', 'astunparse.unparser', 'astunparse.printer', 'astunparse', 'tensorflow.python.autograph.pyct.errors', 'tensorflow.python.autograph.pyct.inspect_utils', 'tensorflow.python.autograph.pyct.parser', 'tensorflow.python.autograph.pyct.qual_names', 'tensorflow.python.autograph.pyct.ast_util', 'tensorflow.python.autograph.pyct.templates', 'termcolor', 'tensorflow.python.autograph.pyct.pretty_printer', 'tensorflow.python.autograph.pyct.transformer', 'tensorflow.python.autograph.core.converter', 'tensorflow.python.autograph.impl', 'imp', 'tensorflow.python.autograph.converters', 'tensorflow.python.autograph.converters.asserts', 'tensorflow.python.autograph.pyct.static_analysis', 'tensorflow.python.autograph.pyct.static_analysis.annos', 'tensorflow.python.autograph.pyct.static_analysis.activity', 'tensorflow.python.autograph.converters.break_statements', 'tensorflow.python.autograph.converters.call_trees', 'tensorflow.python.autograph.converters.conditional_expressions', 'tensorflow.python.autograph.converters.continue_statements', 'tensorflow.python.autograph.lang', 'tensorflow.python.autograph.lang.directives', 'tensorflow.python.autograph.pyct.cfg', 'tensorflow.python.autograph.pyct.origin_info', 'tensorflow.python.autograph.pyct.static_analysis.liveness', 'tensorflow.python.autograph.pyct.static_analysis.reaching_definitions', 'tensorflow.python.autograph.pyct.static_analysis.reaching_fndefs', 'tensorflow.python.autograph.converters.control_flow', 'tensorflow.python.autograph.converters.directives', 'tensorflow.python.autograph.converters.functions', 'tensorflow.python.autograph.converters.lists', 'tensorflow.python.autograph.converters.logical_expressions', 'tensorflow.python.autograph.converters.return_statements', 'tensorflow.python.autograph.converters.slices', 'tensorflow.python.autograph.converters.variables', 'tensorflow.python.autograph.core.ag_ctx', 'tensorflow.python.autograph.core.function_wrappers', 'tensorflow.python.autograph.core.unsupported_features_checker', 'tensorflow.python.autograph.core.config_lib', 'tensorflow.python.autograph.core.config', 'tensorflow.python.autograph.pyct.cache', 'tensorflow.python.autograph.impl.conversion', 'tensorflow.python.autograph.lang.special_functions', 'tensorflow.python.autograph.pyct.error_utils', 'tensorflow.python.autograph.pyct.loader', 'tensorflow.python.autograph.pyct.naming', 'tensorflow.python.autograph.pyct.transpiler', 'tensorflow.python.autograph.impl.api', 'tensorflow.python.autograph', 'tensorflow.python.distribute.collective_util', 'tensorflow.python.distribute.numpy_dataset', 'tensorflow.python.distribute.reduce_util', 'tensorflow.python.ops.losses', 'tensorflow.python.ops.confusion_matrix', 'tensorflow.python.ops.gen_ctc_ops', 'tensorflow.python.ops.inplace_ops', 'tensorflow.python.ops.map_fn', 'tensorflow.python.ops.linalg_ops', 'tensorflow.python.ops.nn_grad', 'tensorflow.python.ops.ctc_ops', 'tensorflow.python.ops.clip_ops', 'tensorflow.python.ops.data_flow_ops', 'tensorflow.python.ops.data_flow_grad', 'tensorflow.python.ops.embedding_ops', 'tensorflow.python.ops.gen_candidate_sampling_ops', 'tensorflow.python.ops.candidate_sampling_ops', 'tensorflow.python.ops.losses.util', 'tensorflow.python.ops.nn_impl', 'tensorflow.python.ops.nn', 'tensorflow.python.ops.gen_set_ops', 'tensorflow.python.ops.sets_impl', 'tensorflow.python.ops.sets', 'tensorflow.python.ops.weights_broadcast_ops', 'tensorflow.python.ops.losses.losses_impl', 'tensorflow.python.distribute.distribute_lib', 'tensorflow.python.distribute.packed_distributed_variable', 'tensorflow.python.saved_model.save_options', 'tensorflow.python.distribute.values_util', 'tensorflow.python.distribute.values', 'tensorflow.python.saved_model.nested_structure_coder', 'tensorflow.python.saved_model.utils_impl', 'tensorflow.python.training.saving.checkpoint_options', 'tensorflow.python.training.saving.saveable_hook', 'tensorflow.python.training.saving.functional_saver', 'tensorflow.compiler.tf2xla.python', 'tensorflow.python.ops.bitwise_ops', 'tensorflow.python.ops.gen_manip_ops', 'tensorflow.python.ops.manip_ops', 'tensorflow.python.ops.numpy_ops.np_export', 'tensorflow.python.ops.numpy_ops.np_dtypes', 'tensorflow.python.ops.numpy_ops.np_arrays', 'tensorflow.python.ops.numpy_ops.np_utils', 'tensorflow.python.ops.numpy_ops.np_array_ops', 'tensorflow.python.ops.numpy_ops.np_random', 'tensorflow.python.ops.numpy_ops.np_math_ops', 'tensorflow.python.ops.numpy_ops.np_config', 'tensorflow.python.ops.numpy_ops', 'tensorflow.compiler.tf2xla.python.xla', 'tensorflow.core.protobuf.tpu', 'tensorflow.core.protobuf.tpu.dynamic_padding_pb2', 'google.protobuf.wrappers_pb2', 'tensorflow.compiler.xla', 'tensorflow.compiler.xla.service', 'tensorflow.compiler.xla.xla_data_pb2', 'tensorflow.compiler.xla.service.hlo_pb2', 'tensorflow.core.protobuf.tpu.optimization_parameters_pb2', 'tensorflow.core.protobuf.tpu.tpu_embedding_output_layout_pb2', 'tensorflow.core.protobuf.tpu.tpu_embedding_configuration_pb2', 'tensorflow.python.compiler', 'tensorflow.python.compiler.xla.jit', 'tensorflow.compiler.jit', 'tensorflow.compiler.jit.ops', 'tensorflow.compiler.jit.ops.xla_ops', 'tensorflow.compiler.jit.ops.xla_ops_grad', 'tensorflow.python.distribute.summary_op_util', 'tensorflow.python.compiler.xla.xla', 'tensorflow.python.compiler.xla', 'tensorflow.core.protobuf.tpu.topology_pb2', 'tensorflow.python.tpu.topology', 'tensorflow.python.tpu.device_assignment', 'tensorflow.compiler.xla.experimental', 'tensorflow.compiler.xla.experimental.xla_sharding', 'tensorflow.compiler.xla.experimental.xla_sharding.xla_sharding', 'tensorflow.python.tpu.tpu_name_util', 'tensorflow.python.tpu.tpu_sharding', 'tensorflow.python.tpu.tpu_feed', 'tensorflow.python.tpu.tpu', 'tensorflow.python.distribute.tpu_util', 'tensorflow.python.distribute.tpu_values', 'tensorflow.python.distribute.distribute_utils', 'tensorflow.python.ops.gen_image_ops', 'tensorflow.python.ops.gen_spectral_ops', 'tensorflow.python.platform.flags', 'tensorflow.python.ops.parallel_for.pfor', 'tensorflow.python.ops.parallel_for.control_flow_ops', 'tensorflow.python.ops.array_grad', 'tensorflow.python.ops.control_flow_grad', 'tensorflow.python.ops.image_grad', 'tensorflow.python.ops.linalg', 'tensorflow.python.ops.linalg.linalg_impl', 'tensorflow.python.ops.linalg_grad', 'tensorflow.python.ops.manip_grad', 'tensorflow.python.ops.math_grad', 'tensorflow.python.ops.optional_grad', 'tensorflow.python.ops.random_grad', 'tensorflow.python.ops.gradients_impl', 'tensorflow.python.ops.parallel_for.gradients', 'tensorflow.python.ops.parallel_for', 'tensorflow.python.eager.forwardprop', 'tensorflow.python.ops.gradients', 'tensorflow.python.training.slot_creator', 'tensorflow.python.training.optimizer', 'tensorflow.python.training.tracking.graph_view', 'tensorflow.python.training.tracking.util', 'tensorflow.python.keras.distribute.sidecar_evaluator', 'tensorflow.python.keras.distribute', 'tensorflow.python.distribute.distribute_coordinator_context', 'tensorflow.core.protobuf.device_filters_pb2', 'tensorflow.core.protobuf.tensorflow_server_pb2', 'tensorflow.python.training.server_lib', 'tensorflow.python.distribute.multi_worker_util', 'tensorflow.python.training.coordinator', 'tensorflow.python.ops.gen_lookup_ops', 'tensorflow.python.ops.lookup_ops', 'tensorflow.python.ops.resources', 'google.protobuf.json_format', 'tensorflow.python.summary.summary', 'tensorflow.core.protobuf.queue_runner_pb2', 'tensorflow.python.training.queue_runner_impl', 'tensorflow.python.training.queue_runner', 'tensorflow.python.training.session_manager', 'tensorflow.python.training.monitored_session', 'tensorflow.python.distribute.distribute_coordinator', 'tensorflow.python.keras.backend_config', 'tensorflow.python.keras.engine', 'tensorflow.python.keras.utils', 'tensorflow.python.keras.utils.object_identity', 'tensorflow.python.ops.gen_ragged_array_ops', 'tensorflow.python.ops.ragged.ragged_array_ops', 'tensorflow.python.ops.ragged.ragged_gather_ops', 'tensorflow.python.ops.ragged.ragged_getitem', 'tensorflow.python.ops.ragged.ragged_operators', 'tensorflow.python.keras.engine.keras_tensor', 'tensorflow.python.keras.utils.control_flow_util', 'tensorflow.python.keras.utils.tf_contextlib', 'tensorflow.python.keras.utils.tf_inspect', 'tensorflow.python.ops.image_ops_impl', 'tensorflow.python.ops.image_ops', 'tensorflow.python.ops.tensor_array_grad', 'tensorflow.python.training.moving_averages', 'tensorflow.python.util.keras_deps', 'tensorflow.python.keras.backend', 'tensorflow.python.keras.distribute.distributed_training_utils', 'tensorflow.python.keras.utils.generic_utils', 'tensorflow.python.keras.constraints', 'tensorflow.python.keras.initializers.initializers_v1', 'tensorflow.python.keras.initializers.initializers_v2', 'tensorflow.python.keras.initializers', 'tensorflow.python.keras.regularizers', 'tensorflow.python.distribute.coordinator', 'tensorflow.python.data.ops.multi_device_iterator_ops', 'tensorflow.python.distribute.input_ops', 'tensorflow.python.distribute.input_lib', 'multiprocessing.dummy.connection', 'multiprocessing.dummy', 'tensorflow.core.framework.device_attributes_pb2', 'tensorflow.python._pywrap_device_lib', 'tensorflow.python.client.device_lib', 'tensorflow.python.ops.gen_collective_ops', 'tensorflow.python.ops.collective_ops', 'tensorflow.python.ops.gen_nccl_ops', 'tensorflow.python.ops.nccl_ops', 'tensorflow.python.distribute.cross_device_utils', 'tensorflow.python.distribute.ps_values', 'tensorflow.core.framework.kernel_def_pb2', 'tensorflow.python.framework.kernels', 'tensorflow.python.distribute.cross_device_ops', 'tensorflow.python.distribute.shared_variable_creator', 'tensorflow.python.distribute.mirrored_run', 'tensorflow.python.distribute.cluster_resolver.cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.gce_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.kubernetes_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.slurm_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.tfconfig_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.tpu', 'tensorflow.python.tpu.tpu_system_metadata', 'tensorflow.python.tpu.client', 'six.moves.urllib', 'six.moves.urllib.error', 'urllib.response', 'urllib.error', 'tensorflow.python.tpu.client.client', 'tensorflow.python.distribute.cluster_resolver.tpu.tpu_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.tpu_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver', 'tensorflow.python.training.device_setter', 'tensorflow.python.distribute.parameter_server_strategy', 'tensorflow.python.ops.partitioned_variables', 'tensorflow.python.distribute.sharded_variable', 'tensorflow.python.platform.remote_utils', 'tensorflow.python.eager.remote', 'tensorflow.python.distribute.parameter_server_strategy_v2', 'tensorflow.python.distribute.coordinator.metric_utils', 'tensorflow.python.eager.cancellation', 'tensorflow.python.distribute.coordinator.cluster_coordinator', 'tensorflow.python.keras.utils.tf_utils', 'tensorflow.python.keras.engine.base_layer_utils', 'tensorflow.python.keras.engine.input_spec', 'tensorflow.python.keras.saving', 'tensorflow.python.keras.saving.saved_model', 'tensorflow.python.keras.saving.saved_model.json_utils', 'tensorflow.python.keras.engine.node', 'tensorflow.python.keras.mixed_precision', 'tensorflow.python.keras.mixed_precision.autocast_variable', 'tensorflow.python.distribute.mirrored_strategy', 'tensorflow.python.distribute.collective_all_reduce_strategy', 'tensorflow.python.distribute.one_device_strategy', 'tensorflow.python.tpu.tpu_strategy_util', 'tensorflow.python.platform.analytics', 'tensorflow.python.tpu.tensor_tracer_flags', 'tensorflow.python.tpu.tensor_tracer_pb2', 'tensorflow.python.tpu.tensor_tracer_report', 'tensorflow.python.tpu.tensor_tracer', 'tensorflow.python.tpu.training_loop', 'tensorflow.python.distribute.tpu_strategy', 'tensorflow.python.keras.optimizer_v1', 'tensorflow.python.keras.optimizer_v2', 'tensorflow.python.distribute.central_storage_strategy', 'tensorflow.python.keras.optimizer_v2.learning_rate_schedule', 'tensorflow.python.keras.optimizer_v2.utils', 'tensorflow.python.keras.utils.layer_utils', 'tensorflow.python.keras.optimizer_v2.optimizer_v2', 'tensorflow.python.ops.gen_training_ops', 'tensorflow.python.training.gen_training_ops', 'tensorflow.python.keras.optimizer_v2.adadelta', 'tensorflow.python.keras.optimizer_v2.adagrad', 'tensorflow.python.keras.optimizer_v2.adam', 'tensorflow.python.keras.optimizer_v2.adamax', 'tensorflow.python.keras.optimizer_v2.ftrl', 'tensorflow.python.keras.optimizer_v2.gradient_descent', 'tensorflow.python.keras.optimizer_v2.nadam', 'tensorflow.python.keras.optimizer_v2.rmsprop', 'tensorflow.python.keras.optimizers', 'tensorflow.python.training.experimental.loss_scale', 'tensorflow.python.keras.mixed_precision.loss_scale', 'tensorflow.python.training.experimental.loss_scale_optimizer', 'tensorflow.python.training.experimental.mixed_precision', 'tensorflow.python.keras.mixed_precision.loss_scale_optimizer', 'tensorflow.python.keras.mixed_precision.device_compatibility_check', 'tensorflow.python.keras.mixed_precision.policy', 'tensorflow.python.keras.saving.saved_model.utils', 'tensorflow.python.keras.saving.saved_model.base_serialization', 'tensorflow.python.keras.saving.saved_model.constants', 'tensorflow.python.keras.utils.losses_utils', 'tensorflow.python.ops.ragged.ragged_map_ops', 'tensorflow.python.keras.losses', 'tensorflow.python.keras.utils.version_utils', 'tensorflow.python.keras.utils.io_utils', 'tensorflow.python.keras.saving.saving_utils', 'tensorflow.python.keras.protobuf', 'tensorflow.python.keras.protobuf.versions_pb2', 'tensorflow.python.keras.protobuf.saved_metadata_pb2', 'tensorflow.python.keras.saving.saved_model.serialized_attributes', 'tensorflow.python.keras.utils.metrics_utils', 'tensorflow.python.framework.function_def_to_graph', 'tensorflow.python.saved_model.function_deserialization', 'tensorflow.python.saved_model.load_options', 'tensorflow.python.eager.wrap_function', 'tensorflow.core.protobuf.saved_model_pb2', 'tensorflow.python.saved_model.signature_constants', 'tensorflow.python.saved_model.signature_def_utils_impl', 'tensorflow.python.saved_model.signature_def_utils', 'tensorflow.python.saved_model.loader_impl', 'tensorflow.python.saved_model.function_serialization', 'tensorflow.python.saved_model.signature_serialization', 'tensorflow.python.saved_model.load_v1_in_v2', 'tensorflow.python.saved_model.load', 'tensorflow.python.keras.saving.saved_model.load', 'tensorflow.python.keras.saving.saved_model.save_impl', 'tensorflow.python.keras.saving.saved_model.layer_serialization', 'tensorflow.python.module', 'tensorflow.python.module.module', 'tensorflow.python.keras.engine.base_layer', 'tensorflow.python.keras.engine.input_layer', 'tensorflow.python.keras.engine.training_utils', 'tarfile', 'six.moves.urllib.request', 'http', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', '_ssl', 'ssl', 'http.client', '_scproxy', 'urllib.request', 'tensorflow.python.keras.utils.data_utils', 'tensorflow.python.keras.utils.dataset_creator', 'tensorflow.python.keras.engine.data_adapter', 'tensorflow.python.keras.engine.base_preprocessing_layer', 'tensorflow.python.keras.layers.preprocessing', 'tensorflow.python.ops.gen_stateful_random_ops', 'tensorflow.python.ops.stateful_random_ops', 'tensorflow.python.keras.layers.preprocessing.image_preprocessing', 'tensorflow.python.keras.layers.preprocessing.category_crossing', 'tensorflow.python.ops.gen_count_ops', 'tensorflow.python.ops.bincount_ops', 'tensorflow.python.keras.layers.preprocessing.category_encoding', 'tensorflow.python.ops.gen_boosted_trees_ops', 'tensorflow.python.keras.layers.preprocessing.discretization', 'tensorflow.python.keras.layers.preprocessing.hashing', 'tensorflow.python.keras.layers.preprocessing.table_utils', 'tensorflow.python.keras.layers.preprocessing.index_lookup', 'tensorflow.python.keras.layers.preprocessing.integer_lookup', 'tensorflow.python.keras.layers.preprocessing.normalization', 'tensorflow.python.keras.layers.preprocessing.string_lookup', 'tensorflow.python.ops.ragged.ragged_string_ops', 'tensorflow.python.keras.layers.preprocessing.text_vectorization', 'tensorflow.python.keras.layers.advanced_activations', 'tensorflow.python.keras.utils.conv_utils', 'tensorflow.python.keras.layers.pooling', 'tensorflow.python.keras.layers.convolutional', 'tensorflow.python.training.experimental.loss_scaling_gradient_tape', 'tensorflow.python.ops.gen_cudnn_rnn_ops', 'tensorflow.python.ops.cudnn_rnn_grad', 'tensorflow.python.ops.gen_rnn_ops', 'tensorflow.python.ops.rnn_grad', 'tensorflow.python.ops.sparse_grad', 'tensorflow.python.ops.state_grad', 'tensorflow.python.ops.gen_batch_ops', 'tensorflow.python.ops.batch_ops', 'tensorflow.python.ops.critical_section_ops', 'tensorflow.python.ops.histogram_ops', 'tensorflow.python.ops.numerics', 'tensorflow.python.ops.gen_decode_proto_ops', 'tensorflow.python.ops.gen_encode_proto_ops', 'tensorflow.python.ops.proto_ops', 'tensorflow.python.ops.ragged.ragged_batch_gather_ops', 'tensorflow.python.ops.ragged.ragged_concat_ops', 'tensorflow.python.ops.ragged.ragged_squeeze_op', 'tensorflow.python.ops.ragged.ragged_tensor_shape', 'tensorflow.python.ops.ragged.ragged_where_op', 'tensorflow.python.ops.ragged.ragged_dispatch', 'tensorflow.python.ops.template', 'tensorflow.python.compiler.tensorrt.utils', 'tensorflow.python.grappler', 'tensorflow.python._pywrap_tf_optimizer', 'tensorflow.core.grappler', 'tensorflow.core.grappler.costs', 'tensorflow.core.protobuf.device_properties_pb2', 'tensorflow.core.grappler.costs.op_performance_data_pb2', 'tensorflow.python._pywrap_tf_cluster', 'tensorflow.python.grappler.cluster', 'tensorflow.python.grappler.tf_optimizer', 'tensorflow.python.framework.convert_to_constants', 'tensorflow.python.saved_model.builder_impl', 'tensorflow.python.saved_model.builder', 'tensorflow.python.saved_model.loader', 'tensorflow.python.saved_model.tag_constants', 'tensorflow.python.saved_model.save', 'tensorflow.compiler.tf2tensorrt', 'tensorflow.compiler.tf2tensorrt.ops', 'tensorflow.compiler.tf2tensorrt.ops.gen_trt_ops', 'tensorflow.python.compiler.tensorrt.trt_convert', 'tensorflow.python.compiler.tensorrt', 'tensorflow.python.ops.standard_ops', 'tensorflow.python.keras.layers.core', 'tensorflow.python.keras.layers.dense_attention', 'tensorflow.python.keras.layers.embeddings', 'tensorflow.python.keras.layers.einsum_dense', 'tensorflow.python.keras.layers.multi_head_attention', 'tensorflow.python.keras.layers.local', 'tensorflow.python.keras.layers.merge', 'tensorflow.python.keras.layers.noise', 'tensorflow.python.keras.layers.normalization', 'tensorflow.python.keras.layers.normalization_v2', 'tensorflow.python.keras.layers.kernelized', 'tensorflow.python.keras.layers.recurrent', 'tensorflow.python.platform.sysconfig', 'tensorflow.python.keras.layers.recurrent_v2', 'tensorflow.python.keras.layers.convolutional_recurrent', 'tensorflow.python.keras.layers.cudnn_recurrent', 'tensorflow.python.keras.layers.wrappers', 'tensorflow.python.keras.layers.legacy_rnn', 'tensorflow.python.keras.layers.legacy_rnn.rnn_cell_wrapper_impl', 'tensorflow.python.keras.layers.rnn_cell_wrapper_v2', 'tensorflow.python.keras.layers.serialization', 'tensorflow.python.keras.layers', 'tensorflow.python.keras.activations', 'tensorflow.python.keras.saving.saved_model.metric_serialization', 'tensorflow.python.keras.metrics', 'tensorflow.python.keras.distribute.distributed_file_utils', 'tensorflow.python.saved_model.model_utils.export_output', 'tensorflow.python.saved_model.model_utils.mode_keys', 'tensorflow.python.saved_model.model_utils.export_utils', 'tensorflow.python.saved_model.model_utils', 'tensorflow.python.keras.utils.mode_keys', 'tensorflow.python.keras.distribute.worker_training_state', 'tensorflow.python.profiler.profiler_v2', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3.exceptions', 'urllib3._version', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.connection', '_cffi_backend', '_brotli.lib', '_brotli', 'brotli._brotli', 'brotli.brotli', 'brotli', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.ssl_', 'urllib3.util.timeout', 'urllib3.util', 'urllib3.util.proxy', 'urllib3._collections', 'urllib3.connection', 'mimetypes', 'urllib3.fields', 'urllib3.filepost', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.request', 'urllib3.response', 'urllib3.util.queue', 'urllib3.connectionpool', 'urllib3.poolmanager', 'urllib3', 'requests.exceptions', 'charset_normalizer.constant', '_multibytecodec', 'charset_normalizer.utils', 'charset_normalizer.md', 'charset_normalizer.models', 'charset_normalizer.assets', 'charset_normalizer.cd', 'charset_normalizer.api', 'charset_normalizer.legacy', 'charset_normalizer.version', 'charset_normalizer.hook', 'charset_normalizer', 'chardet.enums', 'chardet.charsetprober', 'chardet.charsetgroupprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.escprober', 'chardet.latin1prober', 'chardet.mbcssm', 'chardet.utf8prober', 'chardet.mbcharsetprober', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.chardistribution', 'chardet.jpcntx', 'chardet.sjisprober', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.mbcsgroupprober', 'chardet.hebrewprober', 'chardet.sbcharsetprober', 'chardet.langbulgarianmodel', 'chardet.langgreekmodel', 'chardet.langhebrewmodel', 'chardet.langrussianmodel', 'chardet.langthaimodel', 'chardet.langturkishmodel', 'chardet.sbcsgroupprober', 'chardet.universaldetector', 'chardet.version', 'chardet', 'requests.__version__', 'importlib._common', 'importlib.resources', 'certifi.core', 'certifi', 'requests.certs', 'http.cookiejar', 'http.cookies', 'requests.compat', 'requests._internal_utils', 'requests.cookies', 'requests.structures', 'requests.utils', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3._version', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.request', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3', 'idna.package_data', 'idna.idnadata', 'idna.intranges', 'idna.core', 'idna', 'requests.packages.idna.package_data', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.idna.core', 'requests.packages.idna', 'requests.packages.chardet', 'requests.packages', 'stringprep', 'encodings.idna', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.models', 'socks', 'urllib3.contrib.socks', 'requests.adapters', 'requests.sessions', 'requests.api', 'requests', 'tensorflow.python.keras.callbacks', 'tensorflow.python.keras.engine.compile_utils', 'tensorflow.python.keras.saving.model_config', 'h5py._errors', '_cython_0_29_21', 'h5py.defs', 'h5py._objects', 'h5py.h5', 'h5py.version', 'h5py.h5r', 'h5py.utils', 'h5py.h5s', 'h5py.h5ac', 'h5py.h5p', 'h5py.h5t', 'h5py._conv', 'h5py.h5z', 'h5py._proxy', 'h5py.h5a', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5g', 'h5py.h5i', 'h5py.h5f', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.compat', 'h5py._hl.filters', 'h5py._hl.base', 'h5py.h5o', 'h5py.h5l', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'h5py._hl.dataset', 'h5py._hl.group', 'h5py._hl.files', 'h5py._hl.attrs', 'h5py', 'tensorflow.python.keras.saving.hdf5_format', 'tensorflow.python.keras.saving.saved_model.load_context', 'tensorflow.python.keras.saving.saved_model.save', 'tensorflow.python.keras.saving.save', 'tensorflow.python.keras.saving.saved_model.model_serialization', 'tensorflow.python.keras.engine.training', 'tensorflow.python.keras.saving.saved_model.network_serialization', 'tensorflow.python.keras.engine.functional', 'tensorflow.python.keras.engine.sequential', 'tensorflow.python.keras.engine.training_utils_v1', 'tensorflow.python.keras.distribute.distributed_training_utils_v1', 'tensorflow.python.keras.engine.training_arrays_v1', 'tensorflow.python.keras.engine.partial_batch_padding_handler', 'tensorflow.python.keras.engine.training_distributed_v1', 'tensorflow.python.keras.engine.training_eager_v1', 'tensorflow.python.keras.engine.training_generator_v1', 'tensorflow.python.keras.engine.training_v1', 'tensorflow.python.keras.models', 'tensorflow.python.keras', 'tensorflow.python.feature_column', 'tensorflow.python.feature_column.utils', 'tensorflow.python.layers', 'tensorflow.python.keras.legacy_tf_layers', 'tensorflow.python.keras.legacy_tf_layers.base', 'tensorflow.python.layers.base', 'tensorflow.python.feature_column.feature_column', 'tensorflow.python.feature_column.feature_column_v2', 'tensorflow.python.feature_column.sequence_feature_column', 'tensorflow.python.feature_column.serialization', 'tensorflow.python.keras.feature_column', 'tensorflow.python.keras.feature_column.base_feature_layer', 'tensorflow.python.keras.feature_column.dense_features', 'tensorflow.python.keras.feature_column.dense_features_v2', 'tensorflow.python.keras.feature_column.sequence_feature_column', 'tensorflow.python.feature_column.feature_column_lib', 'tensorflow.python.keras.legacy_tf_layers.core', 'tensorflow.python.layers.core', 'tensorflow.python.keras.legacy_tf_layers.convolutional', 'tensorflow.python.layers.convolutional', 'tensorflow.python.keras.legacy_tf_layers.pooling', 'tensorflow.python.layers.pooling', 'tensorflow.python.keras.legacy_tf_layers.normalization', 'tensorflow.python.layers.normalization', 'tensorflow.python.layers.layers', 'tensorflow.python.ops.control_flow_util_v2', 'tensorflow.python.ops.cond_v2', 'tensorflow.python.ops.gradient_checker_v2', 'tensorflow.python.ops.metrics_impl', 'tensorflow.python.ops.metrics', 'tensorflow.python.ops.while_v2_indexed_slices_rewriter', 'tensorflow.python.ops.while_v2', 'tensorflow.python.ops.distributions', 'tensorflow.python.ops.distributions.kullback_leibler', 'tensorflow.python.ops.distributions.util', 'tensorflow.python.ops.distributions.distribution', 'tensorflow.python.ops.distributions.bernoulli', 'tensorflow.python.ops.distributions.beta', 'tensorflow.python.ops.distributions.categorical', 'tensorflow.python.ops.distributions.dirichlet', 'tensorflow.python.ops.distributions.dirichlet_multinomial', 'tensorflow.python.ops.distributions.gamma', 'tensorflow.python.ops.distributions.exponential', 'tensorflow.python.ops.distributions.special_math', 'tensorflow.python.ops.distributions.laplace', 'tensorflow.python.ops.distributions.multinomial', 'tensorflow.python.ops.distributions.normal', 'tensorflow.python.ops.distributions.student_t', 'tensorflow.python.ops.distributions.uniform', 'tensorflow.python.ops.distributions.distributions', 'tensorflow.python.ops.linalg.linear_operator_algebra', 'tensorflow.python.ops.linalg.linear_operator_util', 'tensorflow.python.ops.linalg.linear_operator', 'tensorflow.python.ops.linalg.linear_operator_adjoint', 'tensorflow.python.ops.linalg.linear_operator_block_diag', 'tensorflow.python.ops.signal', 'tensorflow.python.ops.signal.fft_ops', 'tensorflow.python.ops.linalg.linear_operator_circulant', 'tensorflow.python.ops.linalg.linear_operator_diag', 'tensorflow.python.ops.linalg.linear_operator_householder', 'tensorflow.python.ops.linalg.linear_operator_identity', 'tensorflow.python.ops.linalg.linear_operator_kronecker', 'tensorflow.python.ops.linalg.adjoint_registrations', 'tensorflow.python.ops.linalg.linear_operator_lower_triangular', 'tensorflow.python.ops.linalg.cholesky_registrations', 'tensorflow.python.ops.linalg.linear_operator_full_matrix', 'tensorflow.python.ops.linalg.linear_operator_addition', 'tensorflow.python.ops.linalg.linear_operator_block_lower_triangular', 'tensorflow.python.ops.linalg.linear_operator_inversion', 'tensorflow.python.ops.linalg.inverse_registrations', 'tensorflow.python.ops.linalg.linear_operator_composition', 'tensorflow.python.ops.linalg.linear_operator_zeros', 'tensorflow.python.ops.linalg.registrations_util', 'tensorflow.python.ops.linalg.matmul_registrations', 'tensorflow.python.ops.linalg.solve_registrations', 'tensorflow.python.ops.linalg.linear_operator_low_rank_update', 'tensorflow.python.ops.linalg.linear_operator_permutation', 'tensorflow.python.ops.linalg.linear_operator_toeplitz', 'tensorflow.python.ops.linalg.linear_operator_tridiag', 'tensorflow.python.ops.linalg.linalg', 'tensorflow.python.ops.linalg.sparse', 'tensorflow.python.ops.linalg.sparse.conjugate_gradient', 'tensorflow.python.ops.linalg.sparse.gen_sparse_csr_matrix_ops', 'tensorflow.python.ops.linalg.sparse.sparse_csr_matrix_ops', 'tensorflow.python.ops.linalg.sparse.sparse_csr_matrix_grad', 'tensorflow.python.ops.linalg.sparse.sparse', 'tensorflow.python.ops.losses.losses', 'tensorflow.python.ops.ragged.ragged_batch_gather_with_default_op', 'tensorflow.python.ops.ragged.ragged_conversion_ops', 'tensorflow.python.ops.ragged.ragged_factory_ops', 'tensorflow.python.ops.ragged.ragged_ops', 'tensorflow.python.ops.signal.dct_ops', 'fractions', 'tensorflow.python.ops.signal.util_ops', 'tensorflow.python.ops.signal.shape_ops', 'tensorflow.python.ops.signal.mel_ops', 'tensorflow.python.ops.signal.mfcc_ops', 'tensorflow.python.ops.signal.reconstruction_ops', 'tensorflow.python.ops.signal.window_ops', 'tensorflow.python.ops.signal.spectral_ops', 'tensorflow.python.ops.signal.signal', 'tensorflow.core.profiler', 'tensorflow.core.profiler.tfprof_log_pb2', 'tensorflow.core.profiler.tfprof_output_pb2', 'tensorflow.core.profiler.tfprof_options_pb2', 'tensorflow.python.profiler.internal.flops_registry', 'tensorflow.python.profiler.tfprof_logger', 'tensorflow.python.profiler.option_builder', 'tensorflow.python.util._pywrap_tfprof', 'tensorflow.python.profiler.model_analyzer', 'tensorflow.python.profiler.profiler', 'tensorflow.python.profiler.profiler_client', 'tensorflow.python.saved_model.main_op_impl', 'tensorflow.python.saved_model.main_op', 'tensorflow.python.saved_model.method_name_updater', 'tensorflow.python.saved_model.utils', 'tensorflow.python.saved_model.simple_save', 'tensorflow.python.saved_model.saved_model', 'tensorflow.python.tpu.bfloat16', 'tensorflow.python.tpu.feature_column', 'tensorflow.python.tpu.feature_column_v2', 'tensorflow.python.tpu.tpu_embedding', 'tensorflow.python.ops.init_ops_v2', 'tensorflow.python.tpu.tpu_embedding_v2_utils', 'tensorflow.python.tpu.tpu_embedding_v2', 'tensorflow.python.tpu.tpu_optimizer', 'tensorflow.python.tpu.api', 'tensorflow.python.user_ops', 'tensorflow.python.ops.gen_user_ops', 'tensorflow.python.user_ops.user_ops', 'tensorflow.python.ops.gen_audio_ops', 'tensorflow.python.ops.gen_sendrecv_ops', 'tensorflow.python.ops.gen_sdca_ops', 'tensorflow.python.ops.sdca_ops', 'tensorflow.python.training.training_ops', 'tensorflow.python.training.adadelta', 'tensorflow.python.training.adagrad', 'tensorflow.python.training.adagrad_da', 'tensorflow.python.training.proximal_adagrad', 'tensorflow.python.training.adam', 'tensorflow.python.training.ftrl', 'tensorflow.python.training.momentum', 'tensorflow.python.training.rmsprop', 'tensorflow.python.training.gradient_descent', 'tensorflow.python.training.proximal_gradient_descent', 'tensorflow.python.training.sync_replicas_optimizer', 'tensorflow.python.layers.utils', 'tensorflow.python.training.input', 'tensorflow.python.training.basic_loops', 'tensorflow.python.training.tracking.python_state', 'tensorflow.python.training.supervisor', 'tensorflow.python.ops.gen_checkpoint_ops', 'tensorflow.python.training.checkpoint_ops', 'tensorflow.python.training.warm_starting_util', 'tensorflow.core.example', 'tensorflow.core.example.feature_pb2', 'tensorflow.core.example.example_pb2', 'tensorflow.python.keras.optimizer_v2.legacy_learning_rate_decay', 'tensorflow.python.training.learning_rate_decay', 'tensorflow.python.training.training', 'tensorflow.python._pywrap_quantize_training', 'tensorflow.python.training.quantize_training', 'tensorflow.python.platform.app', 'tensorflow.python.platform.resource_loader', 'absl.testing', 'shlex', 'absl._enum_module', 'absl.third_party', 'absl.third_party.unittest3_backport.case', 'absl.third_party.unittest3_backport.result', 'absl.third_party.unittest3_backport', 'absl.testing._pretty_print_reporter', 'xml.sax.handler', 'xml.sax._exceptions', 'xml.sax.xmlreader', 'xml.sax', 'xml.sax.saxutils', 'absl.testing.xml_reporter', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.unix_events', 'asyncio', 'unittest.mock', 'absl.testing.absltest', 'absl.testing._parameterized_async', 'absl.testing.parameterized', 'tensorflow.python.framework.gpu_util', 'tensorflow.python.platform._pywrap_stacktrace_handler', 'tensorflow.core.util.test_log_pb2', 'tensorflow.python.platform.benchmark', 'tensorflow.python.platform.googletest', 'tensorflow.python.util._pywrap_util_port', 'tensorflow.python.util.protobuf', 'tensorflow.python.util.protobuf.compare', 'tensorflow.python.framework.test_util', 'tensorflow.python.ops.gradient_checker', 'tensorflow.python.platform.test', 'tensorflow.python.ops.control_flow_v2_toggles', 'tensorflow.python.compat.v2_compat', 'tensorflow.python.keras.layers.legacy_rnn.rnn_cell_impl', 'tensorflow.python.ops.rnn_cell_impl', 'tensorflow.python.ops.rnn', 'tensorflow.python.ops.rnn_cell', 'tensorflow.python.debug.lib', 'tensorflow.python.debug.lib.debug_graphs', 'tensorflow.python.debug.lib.debug_data', 'tensorflow.python.debug.lib.debug_gradients', 'tensorflow.python.debug.lib.debug_utils', 'tensorflow.python.debug.wrappers', 'tensorflow.python.debug.wrappers.framework', 'tensorflow.python.debug.wrappers.dumping_wrapper', 'tensorflow.python.debug.lib.common', 'tensorflow.python.debug.wrappers.grpc_wrapper', 'tensorflow.python.debug.cli', 'tensorflow.python.debug.cli.debugger_cli_common', 'tensorflow.python.debug.cli.cli_config', 'tensorflow.python.debug.cli.command_parser', 'tensorflow.python.debug.cli.tensor_format', 'tensorflow.python.debug.cli.cli_shared', 'tensorflow.python.debug.cli.evaluator', 'tensorflow.python.debug.cli.ui_factory', 'tensorflow.python.debug.lib.profiling', 'tensorflow.python.debug.lib.source_utils', 'tensorflow.python.debug.cli.analyzer_cli', 'tensorflow.python.debug.cli.profile_analyzer_cli', 'tensorflow.python.debug.wrappers.local_cli_wrapper', 'tensorflow.python.debug.wrappers.hooks', 'tensorflow.python.debug', 'tensorflow.core.protobuf.debug_event_pb2', 'tensorflow.python.debug.lib.op_callbacks_common', 'tensorflow.python.ops.gen_debug_ops', 'tensorflow.python.debug.lib.check_numerics_callback', 'tensorflow.python._pywrap_debug_events_writer', 'tensorflow.python.debug.lib.debug_events_writer', 'tensorflow.python.debug.lib.dumping_callback', 'tensorflow.python.dlpack', 'tensorflow.python.dlpack.dlpack', 'tensorflow.python.compiler.mlir', 'tensorflow.python._pywrap_mlir', 'tensorflow.python.pywrap_mlir', 'tensorflow.python.compiler.mlir.mlir', 'tensorflow.python', 'tensorflow.python.tools', 'tensorflow.python.tools.module_util', 'tensorflow._api', 'tensorflow._api.v2', 'tensorflow._api.v2.__internal__.autograph', 'tensorflow._api.v2.__internal__.decorator', 'tensorflow._api.v2.__internal__.dispatch', 'tensorflow.python.eager.test', 'tensorflow.python.distribute.multi_process_lib', 'dill.info', '_pyio', 'dill.settings', 'dill._dill', 'dill.source', 'dill.temp', 'dill.pointers', 'dill.detect', 'dill.objtypes', 'dill', 'tensorflow.python.distribute.multi_process_runner', 'tensorflow.python.distribute.multi_worker_test_base', 'tensorflow.python.framework.test_combinations', 'tensorflow.python.framework.combinations', 'tensorflow.python.distribute.combinations', 'tensorflow.python.distribute.test_util', 'tensorflow.python.distribute.strategy_combinations', 'tensorflow._api.v2.__internal__.distribute.combinations', 'tensorflow._api.v2.__internal__.distribute.multi_process_runner', 'tensorflow._api.v2.__internal__.distribute', 'tensorflow._api.v2.__internal__.eager_context', 'tensorflow._api.v2.__internal__.feature_column', 'tensorflow._api.v2.__internal__.function', 'tensorflow._api.v2.__internal__.graph_util', 'tensorflow._api.v2.__internal__.monitoring', 'tensorflow._api.v2.__internal__.nest', 'tensorflow._api.v2.__internal__.ops', 'tensorflow._api.v2.__internal__.saved_model', 'tensorflow._api.v2.__internal__.test.combinations', 'tensorflow._api.v2.__internal__.test', 'tensorflow._api.v2.__internal__.tf2', 'tensorflow._api.v2.__internal__.tracking', 'tensorflow._api.v2.__internal__.types', 'tensorflow._api.v2.__internal__', 'tensorflow._api.v2.__operators__', 'tensorflow._api.v2.audio', 'tensorflow._api.v2.autodiff', 'tensorflow._api.v2.autograph.experimental', 'tensorflow._api.v2.autograph', 'tensorflow._api.v2.bitwise', 'tensorflow._api.v2.compat.v1.app', 'tensorflow._api.v2.compat.v1.audio', 'tensorflow._api.v2.compat.v1.autograph.experimental', 'tensorflow._api.v2.compat.v1.autograph', 'tensorflow._api.v2.compat.v1.bitwise', 'tensorflow._api.v2.compat.v1.compat.v1.compat', 'tensorflow._api.v2.compat.v1.config.experimental', 'tensorflow._api.v2.compat.v1.config.optimizer', 'tensorflow._api.v2.compat.v1.config.threading', 'tensorflow._api.v2.compat.v1.config', 'tensorflow._api.v2.compat.v1.data.experimental.service', 'tensorflow._api.v2.compat.v1.data.experimental', 'tensorflow._api.v2.compat.v1.data', 'tensorflow._api.v2.compat.v1.debugging.experimental', 'tensorflow._api.v2.compat.v1.debugging', 'tensorflow._api.v2.compat.v1.distribute.cluster_resolver', 'tensorflow._api.v2.compat.v1.distribute.experimental', 'tensorflow._api.v2.compat.v1.distribute', 'tensorflow._api.v2.compat.v1.distributions', 'tensorflow._api.v2.compat.v1.dtypes', 'tensorflow._api.v2.compat.v1.errors', 'tensorflow.python._pywrap_python_op_gen', 'tensorflow.python.framework.load_library', 'tensorflow._api.v2.compat.v1.experimental', 'tensorflow._api.v2.compat.v1.feature_column', 'tensorflow._api.v2.compat.v1.gfile', 'tensorflow._api.v2.compat.v1.graph_util', 'tensorflow._api.v2.compat.v1.image', 'tensorflow._api.v2.compat.v1.initializers', 'tensorflow._api.v2.compat.v1.io.gfile', 'tensorflow._api.v2.compat.v1.io', 'tensorflow._api.v2.compat.v1.layers.experimental', 'tensorflow._api.v2.compat.v1.layers', 'tensorflow._api.v2.compat.v1.linalg.experimental', 'tensorflow._api.v2.compat.v1.linalg', 'tensorflow.lite', 'tensorflow.lite.python', 'tensorflow.lite.toco', 'tensorflow.lite.toco.types_pb2', 'tensorflow.lite.toco.toco_flags_pb2', 'tensorflow.lite.python.lite_constants', 'tensorflow._api.v2.compat.v1.lite.constants', 'tensorflow.lite.experimental', 'tensorflow.lite.experimental.examples', 'tensorflow.lite.experimental.examples.lstm', 'tensorflow.lite.python.op_hint', 'tensorflow.lite.experimental.examples.lstm.rnn', 'tensorflow.lite.experimental.examples.lstm.rnn_cell', 'tensorflow.lite.experimental.microfrontend', 'tensorflow.lite.experimental.microfrontend.python', 'tensorflow.lite.experimental.microfrontend.python.ops', 'tensorflow.lite.experimental.microfrontend.ops', 'tensorflow.lite.experimental.microfrontend.ops.gen_audio_microfrontend_op', '2f7ece400a652629565c523b34ee61b04afa385c', 'tensorflow.lite.experimental.microfrontend.python.ops.audio_microfrontend_op', 'tensorflow.lite.experimental.tensorboard', 'tensorflow.python._pywrap_toco_api', 'tensorflow.lite.python.wrap_toco', 'tensorflow.lite.experimental.tensorboard.ops_util', 'distutils.errors', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'flatbuffers.compat', 'flatbuffers.packer', 'flatbuffers.number_types', 'flatbuffers.encode', 'flatbuffers.builder', 'flatbuffers.table', 'flatbuffers.util', 'flatbuffers', 'tensorflow.lite.python.schema_py_generated', 'tensorflow.lite.python.schema_util', 'tensorflow.lite.python.tflite_keras_util', 'tensorflow.lite.python.util', 'tensorflow.lite.toco.model_flags_pb2', 'tensorflow.lite.python.convert', 'tensorflow.lite.python.convert_saved_model', 'tensorflow.lite.python.interpreter_wrapper', 'tensorflow.lite.python.interpreter_wrapper._pywrap_tensorflow_interpreter_wrapper', 'tensorflow.lite.python.metrics_interface', 'tensorflow.lite.python.metrics_portable', 'tensorflow.lite.python.interpreter', 'tensorflow.lite.python.optimize', 'tensorflow.lite.python.optimize.calibrator', 'tensorflow.lite.python.lite', 'tensorflow._api.v2.compat.v1.lite.experimental.nn', 'tensorflow._api.v2.compat.v1.lite.experimental', 'tensorflow._api.v2.compat.v1.lite', 'tensorflow._api.v2.compat.v1.logging', 'tensorflow._api.v2.compat.v1.lookup.experimental', 'tensorflow._api.v2.compat.v1.lookup', 'tensorflow._api.v2.compat.v1.losses', 'tensorflow._api.v2.compat.v1.manip', 'tensorflow._api.v2.compat.v1.math.special', 'tensorflow._api.v2.compat.v1.math', 'tensorflow._api.v2.compat.v1.metrics', 'tensorflow._api.v2.compat.v1.mixed_precision.experimental', 'tensorflow._api.v2.compat.v1.mixed_precision', 'tensorflow._api.v2.compat.v1.mlir.experimental', 'tensorflow._api.v2.compat.v1.mlir', 'tensorflow._api.v2.compat.v1.nest', 'tensorflow._api.v2.compat.v1.nn.rnn_cell', 'tensorflow._api.v2.compat.v1.nn', 'tensorflow._api.v2.compat.v1.profiler', 'tensorflow._api.v2.compat.v1.python_io', 'tensorflow._api.v2.compat.v1.quantization', 'tensorflow._api.v2.compat.v1.queue', 'tensorflow._api.v2.compat.v1.ragged', 'tensorflow._api.v2.compat.v1.random.experimental', 'tensorflow._api.v2.compat.v1.random', 'tensorflow._api.v2.compat.v1.raw_ops', 'tensorflow._api.v2.compat.v1.resource_loader', 'tensorflow._api.v2.compat.v1.saved_model.builder', 'tensorflow._api.v2.compat.v1.saved_model.constants', 'tensorflow._api.v2.compat.v1.saved_model.experimental', 'tensorflow._api.v2.compat.v1.saved_model.loader', 'tensorflow._api.v2.compat.v1.saved_model.main_op', 'tensorflow._api.v2.compat.v1.saved_model.signature_constants', 'tensorflow._api.v2.compat.v1.saved_model.signature_def_utils', 'tensorflow._api.v2.compat.v1.saved_model.tag_constants', 'tensorflow._api.v2.compat.v1.saved_model.utils', 'tensorflow._api.v2.compat.v1.saved_model', 'tensorflow._api.v2.compat.v1.sets', 'tensorflow._api.v2.compat.v1.signal', 'tensorflow._api.v2.compat.v1.sparse', 'tensorflow._api.v2.compat.v1.spectral', 'tensorflow._api.v2.compat.v1.strings', 'tensorflow._api.v2.compat.v1.summary', 'tensorflow._api.v2.compat.v1.sysconfig', 'tensorflow._api.v2.compat.v1.test', 'tensorflow._api.v2.compat.v1.tpu.experimental.embedding', 'tensorflow._api.v2.compat.v1.tpu.experimental', 'tensorflow._api.v2.compat.v1.tpu', 'tensorflow._api.v2.compat.v1.train.experimental', 'tensorflow._api.v2.compat.v1.train.queue_runner', 'tensorflow._api.v2.compat.v1.train', 'tensorflow._api.v2.compat.v1.types.experimental', 'tensorflow._api.v2.compat.v1.types', 'tensorflow._api.v2.compat.v1.user_ops', 'tensorflow._api.v2.compat.v1.version', 'tensorflow._api.v2.compat.v1.xla.experimental', 'tensorflow._api.v2.compat.v1.xla', 'tensorflow.python.util.fast_module_type', 'tensorflow.tools.compatibility', 'tensorflow.tools.compatibility.renames_v2', 'tensorflow.tools.compatibility.all_renames_v2', 'tensorflow.python.util.module_wrapper', 'tensorflow.python.keras.api.keras.activations', 'tensorflow.python.keras.applications', 'tensorflow.python.keras.applications.imagenet_utils', 'tensorflow.python.keras.applications.densenet', 'tensorflow.python.keras.api.keras.applications.densenet', 'tensorflow.python.keras.applications.efficientnet', 'tensorflow.python.keras.api.keras.applications.efficientnet', 'tensorflow.python.keras.api.keras.applications.imagenet_utils', 'tensorflow.python.keras.applications.inception_resnet_v2', 'tensorflow.python.keras.api.keras.applications.inception_resnet_v2', 'tensorflow.python.keras.applications.inception_v3', 'tensorflow.python.keras.api.keras.applications.inception_v3', 'tensorflow.python.keras.applications.mobilenet', 'tensorflow.python.keras.api.keras.applications.mobilenet', 'tensorflow.python.keras.applications.mobilenet_v2', 'tensorflow.python.keras.api.keras.applications.mobilenet_v2', 'tensorflow.python.keras.applications.mobilenet_v3', 'tensorflow.python.keras.api.keras.applications.mobilenet_v3', 'tensorflow.python.keras.applications.nasnet', 'tensorflow.python.keras.api.keras.applications.nasnet', 'tensorflow.python.keras.applications.resnet', 'tensorflow.python.keras.api.keras.applications.resnet', 'tensorflow.python.keras.api.keras.applications.resnet50', 'tensorflow.python.keras.applications.resnet_v2', 'tensorflow.python.keras.api.keras.applications.resnet_v2', 'tensorflow.python.keras.applications.vgg16', 'tensorflow.python.keras.api.keras.applications.vgg16', 'tensorflow.python.keras.applications.vgg19', 'tensorflow.python.keras.api.keras.applications.vgg19', 'tensorflow.python.keras.applications.xception', 'tensorflow.python.keras.api.keras.applications.xception', 'tensorflow.python.keras.api.keras.applications', 'tensorflow.python.keras.api.keras.backend', 'tensorflow.python.keras.callbacks_v1', 'tensorflow.python.keras.api.keras.callbacks', 'tensorflow.python.keras.api.keras.constraints', 'tensorflow.python.keras.datasets', 'tensorflow.python.keras.datasets.boston_housing', 'tensorflow.python.keras.api.keras.datasets.boston_housing', 'tensorflow.python.keras.datasets.cifar', 'tensorflow.python.keras.datasets.cifar10', 'tensorflow.python.keras.api.keras.datasets.cifar10', 'tensorflow.python.keras.datasets.cifar100', 'tensorflow.python.keras.api.keras.datasets.cifar100', 'tensorflow.python.keras.datasets.fashion_mnist', 'tensorflow.python.keras.api.keras.datasets.fashion_mnist', 'keras_preprocessing', 'PIL._version', 'PIL', 'defusedxml.common', 'defusedxml', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'PIL.ImageFilter', 'PIL.ImageStat', 'PIL.ImageEnhance', 'keras_preprocessing.image.utils', 'keras_preprocessing.image.affine_transformations', 'keras_preprocessing.image.iterator', 'keras_preprocessing.image.dataframe_iterator', 'keras_preprocessing.image.directory_iterator', 'keras_preprocessing.image.numpy_array_iterator', 'keras_preprocessing.image.image_data_generator', 'keras_preprocessing.image', 'tensorflow.python.keras.preprocessing.dataset_utils', 'tensorflow.python.keras.preprocessing.image_dataset', 'tensorflow.python.keras.preprocessing.image', 'keras_preprocessing.sequence', 'tensorflow.python.keras.preprocessing.sequence', 'keras_preprocessing.text', 'tensorflow.python.keras.preprocessing.text_dataset', 'tensorflow.python.keras.preprocessing.text', 'tensorflow.python.keras.preprocessing.timeseries', 'tensorflow.python.keras.utils.multi_gpu_utils', 'tensorflow.python.keras.utils.np_utils', 'tensorflow.python.keras.utils.vis_utils', 'tensorflow.python.keras.utils.all_utils', 'tensorflow.python.keras.preprocessing', 'tensorflow.python.keras.datasets.imdb', 'tensorflow.python.keras.api.keras.datasets.imdb', 'tensorflow.python.keras.datasets.mnist', 'tensorflow.python.keras.api.keras.datasets.mnist', 'tensorflow.python.keras.datasets.reuters', 'tensorflow.python.keras.api.keras.datasets.reuters', 'tensorflow.python.keras.api.keras.datasets', 'tensorflow.python.keras.estimator', 'tensorflow.python.keras.api.keras.estimator', 'tensorflow.python.keras.premade.linear', 'tensorflow.python.keras.premade.wide_deep', 'tensorflow.python.keras.premade', 'tensorflow.python.keras.saving.utils_v1.unexported_constants', 'tensorflow.python.keras.saving.utils_v1.signature_def_utils', 'tensorflow.python.keras.saving.utils_v1.export_output', 'tensorflow.python.keras.saving.utils_v1.mode_keys', 'tensorflow.python.keras.saving.utils_v1.export_utils', 'tensorflow.python.keras.saving.utils_v1', 'tensorflow.python.keras.saving.saved_model_experimental', 'tensorflow.python.keras.api.keras.experimental', 'tensorflow.python.keras.api.keras.initializers', 'tensorflow.python.keras.api.keras.layers.experimental.preprocessing', 'tensorflow.python.keras.api.keras.layers.experimental', 'tensorflow.python.keras.api.keras.layers', 'tensorflow.python.keras.api.keras.losses', 'tensorflow.python.keras.api.keras.metrics', 'tensorflow.python.keras.api.keras.mixed_precision.experimental', 'tensorflow.python.keras.api.keras.mixed_precision', 'tensorflow.python.keras.api.keras.models', 'tensorflow.python.keras.api.keras.optimizers.schedules', 'tensorflow.python.keras.api.keras.optimizers', 'tensorflow.python.keras.api.keras.preprocessing.image', 'tensorflow.python.keras.api.keras.preprocessing.sequence', 'tensorflow.python.keras.api.keras.preprocessing.text', 'tensorflow.python.keras.api.keras.preprocessing', 'tensorflow.python.keras.api.keras.regularizers', 'tensorflow.python.keras.api.keras.utils', 'tensorflow.python.keras.wrappers', 'tensorflow.python.keras.wrappers.scikit_learn', 'tensorflow.python.keras.api.keras.wrappers.scikit_learn', 'tensorflow.python.keras.api.keras.wrappers', 'tensorflow.python.keras.api.keras', 'tensorflow.python.keras.api', 'tensorflow.python.keras.api._v1.keras.activations', 'tensorflow.python.keras.api._v1.keras.applications.densenet', 'tensorflow.python.keras.api._v1.keras.applications.efficientnet', 'tensorflow.python.keras.api._v1.keras.applications.imagenet_utils', 'tensorflow.python.keras.api._v1.keras.applications.inception_resnet_v2', 'tensorflow.python.keras.api._v1.keras.applications.inception_v3', 'tensorflow.python.keras.api._v1.keras.applications.mobilenet', 'tensorflow.python.keras.api._v1.keras.applications.mobilenet_v2', 'tensorflow.python.keras.api._v1.keras.applications.mobilenet_v3', 'tensorflow.python.keras.api._v1.keras.applications.nasnet', 'tensorflow.python.keras.api._v1.keras.applications.resnet', 'tensorflow.python.keras.api._v1.keras.applications.resnet50', 'tensorflow.python.keras.api._v1.keras.applications.resnet_v2', 'tensorflow.python.keras.api._v1.keras.applications.vgg16', 'tensorflow.python.keras.api._v1.keras.applications.vgg19', 'tensorflow.python.keras.api._v1.keras.applications.xception', 'tensorflow.python.keras.api._v1.keras.applications', 'tensorflow.python.keras.api._v1.keras.backend', 'tensorflow.python.keras.api._v1.keras.callbacks', 'tensorflow.python.keras.api._v1.keras.constraints', 'tensorflow.python.keras.api._v1.keras.datasets.boston_housing', 'tensorflow.python.keras.api._v1.keras.datasets.cifar10', 'tensorflow.python.keras.api._v1.keras.datasets.cifar100', 'tensorflow.python.keras.api._v1.keras.datasets.fashion_mnist', 'tensorflow.python.keras.api._v1.keras.datasets.imdb', 'tensorflow.python.keras.api._v1.keras.datasets.mnist', 'tensorflow.python.keras.api._v1.keras.datasets.reuters', 'tensorflow.python.keras.api._v1.keras.datasets', 'tensorflow.python.keras.api._v1.keras.estimator', 'tensorflow.python.keras.api._v1.keras.experimental', 'tensorflow.python.keras.api._v1.keras.initializers', 'tensorflow.python.keras.api._v1.keras.layers.experimental.preprocessing', 'tensorflow.python.keras.api._v1.keras.layers.experimental', 'tensorflow.python.keras.api._v1.keras.layers', 'tensorflow.python.keras.api._v1.keras.losses', 'tensorflow.python.keras.api._v1.keras.metrics', 'tensorflow.python.keras.api._v1.keras.mixed_precision.experimental', 'tensorflow.python.keras.api._v1.keras.mixed_precision', 'tensorflow.python.keras.api._v1.keras.models', 'tensorflow.python.keras.api._v1.keras.optimizers.schedules', 'tensorflow.python.keras.api._v1.keras.optimizers', 'tensorflow.python.keras.api._v1.keras.preprocessing.image', 'tensorflow.python.keras.api._v1.keras.preprocessing.sequence', 'tensorflow.python.keras.api._v1.keras.preprocessing.text', 'tensorflow.python.keras.api._v1.keras.preprocessing', 'tensorflow.python.keras.api._v1.keras.regularizers', 'tensorflow.python.keras.api._v1.keras.utils', 'tensorflow.python.keras.api._v1.keras.wrappers.scikit_learn', 'tensorflow.python.keras.api._v1.keras.wrappers', 'tensorflow.python.keras.api._v1.keras', 'tensorflow.python.keras.api._v1', 'tensorflow._api.v2.compat.v1.compat.v1', 'tensorflow._api.v2.compat.v1.compat.v2.compat', 'tensorflow._api.v2.compat.v2.__internal__.autograph', 'tensorflow._api.v2.compat.v2.__internal__.decorator', 'tensorflow._api.v2.compat.v2.__internal__.dispatch', 'tensorflow._api.v2.compat.v2.__internal__.distribute.combinations', 'tensorflow._api.v2.compat.v2.__internal__.distribute.multi_process_runner', 'tensorflow._api.v2.compat.v2.__internal__.distribute', 'tensorflow._api.v2.compat.v2.__internal__.eager_context', 'tensorflow._api.v2.compat.v2.__internal__.feature_column', 'tensorflow._api.v2.compat.v2.__internal__.function', 'tensorflow._api.v2.compat.v2.__internal__.graph_util', 'tensorflow._api.v2.compat.v2.__internal__.monitoring', 'tensorflow._api.v2.compat.v2.__internal__.nest', 'tensorflow._api.v2.compat.v2.__internal__.ops', 'tensorflow._api.v2.compat.v2.__internal__.saved_model', 'tensorflow._api.v2.compat.v2.__internal__.test.combinations', 'tensorflow._api.v2.compat.v2.__internal__.test', 'tensorflow._api.v2.compat.v2.__internal__.tf2', 'tensorflow._api.v2.compat.v2.__internal__.tracking', 'tensorflow._api.v2.compat.v2.__internal__.types', 'tensorflow._api.v2.compat.v2.__internal__', 'tensorflow._api.v2.compat.v2.__operators__', 'tensorflow._api.v2.compat.v2.audio', 'tensorflow._api.v2.compat.v2.autodiff', 'tensorflow._api.v2.compat.v2.autograph.experimental', 'tensorflow._api.v2.compat.v2.autograph', 'tensorflow._api.v2.compat.v2.bitwise', 'tensorflow._api.v2.compat.v2.compat.v1.compat', 'tensorflow._api.v2.compat.v2.compat.v1', 'tensorflow._api.v2.compat.v2.compat.v2.compat', 'tensorflow._api.v2.compat.v2.config.experimental', 'tensorflow._api.v2.compat.v2.config.optimizer', 'tensorflow._api.v2.compat.v2.config.threading', 'tensorflow._api.v2.compat.v2.config', 'tensorflow._api.v2.compat.v2.data.experimental.service', 'tensorflow._api.v2.compat.v2.data.experimental', 'tensorflow._api.v2.compat.v2.data', 'tensorflow._api.v2.compat.v2.debugging.experimental', 'tensorflow._api.v2.compat.v2.debugging', 'tensorflow._api.v2.compat.v2.distribute.cluster_resolver', 'tensorflow._api.v2.compat.v2.distribute.experimental.coordinator', 'tensorflow._api.v2.compat.v2.distribute.experimental.partitioners', 'tensorflow._api.v2.compat.v2.distribute.experimental', 'tensorflow._api.v2.compat.v2.distribute', 'tensorflow._api.v2.compat.v2.dtypes', 'tensorflow._api.v2.compat.v2.errors', 'tensorflow._api.v2.compat.v2.experimental.dlpack', 'tensorflow._api.v2.compat.v2.experimental.numpy.random', 'tensorflow._api.v2.compat.v2.experimental.numpy', 'tensorflow._api.v2.compat.v2.experimental.tensorrt', 'tensorflow._api.v2.compat.v2.experimental', 'tensorflow._api.v2.compat.v2.feature_column', 'tensorflow._api.v2.compat.v2.graph_util', 'tensorflow._api.v2.compat.v2.image', 'tensorflow._api.v2.compat.v2.io.gfile', 'tensorflow._api.v2.compat.v2.io', 'tensorflow._api.v2.compat.v2.linalg.experimental', 'tensorflow._api.v2.compat.v2.linalg', 'tensorflow._api.v2.compat.v2.lite.experimental', 'tensorflow._api.v2.compat.v2.lite', 'tensorflow._api.v2.compat.v2.lookup.experimental', 'tensorflow._api.v2.compat.v2.lookup', 'tensorflow._api.v2.compat.v2.math.special', 'tensorflow._api.v2.compat.v2.math', 'tensorflow._api.v2.compat.v2.mixed_precision.experimental', 'tensorflow._api.v2.compat.v2.mixed_precision', 'tensorflow._api.v2.compat.v2.mlir.experimental', 'tensorflow._api.v2.compat.v2.mlir', 'tensorflow._api.v2.compat.v2.nest', 'tensorflow._api.v2.compat.v2.nn', 'tensorflow._api.v2.compat.v2.profiler.experimental.client', 'tensorflow._api.v2.compat.v2.profiler.experimental.server', 'tensorflow._api.v2.compat.v2.profiler.experimental', 'tensorflow._api.v2.compat.v2.profiler', 'tensorflow._api.v2.compat.v2.quantization', 'tensorflow._api.v2.compat.v2.queue', 'tensorflow._api.v2.compat.v2.ragged', 'tensorflow._api.v2.compat.v2.random.experimental', 'tensorflow._api.v2.compat.v2.random', 'tensorflow._api.v2.compat.v2.raw_ops', 'tensorflow._api.v2.compat.v2.saved_model.experimental', 'tensorflow._api.v2.compat.v2.saved_model', 'tensorflow._api.v2.compat.v2.sets', 'tensorflow._api.v2.compat.v2.signal', 'tensorflow._api.v2.compat.v2.sparse', 'tensorflow._api.v2.compat.v2.strings', 'tensorflow._api.v2.compat.v2.summary.experimental', 'tensorflow._api.v2.compat.v2.summary', 'tensorflow._api.v2.compat.v2.sysconfig', 'tensorflow._api.v2.compat.v2.test', 'tensorflow._api.v2.compat.v2.tpu.experimental.embedding', 'tensorflow._api.v2.compat.v2.tpu.experimental', 'tensorflow._api.v2.compat.v2.tpu', 'tensorflow._api.v2.compat.v2.train.experimental', 'tensorflow._api.v2.compat.v2.train', 'tensorflow._api.v2.compat.v2.types.experimental', 'tensorflow._api.v2.compat.v2.types', 'tensorflow._api.v2.compat.v2.version', 'tensorflow._api.v2.compat.v2.xla.experimental', 'tensorflow._api.v2.compat.v2.xla', 'tensorboard.lazy', 'tensorboard.version', 'tensorboard', 'tensorboard.plugins', 'tensorboard.plugins.audio', 'tensorboard.util', 'tensorboard.util.op_evaluator', 'tensorboard.util.encoder', 'tensorboard.compat', 'tensorboard.compat.proto', 'tensorboard.compat.proto.tensor_shape_pb2', 'tensorboard.compat.proto.types_pb2', 'tensorboard.compat.proto.resource_handle_pb2', 'tensorboard.compat.proto.tensor_pb2', 'tensorboard.compat.proto.summary_pb2', 'tensorboard.plugins.audio.plugin_data_pb2', 'tensorboard.plugins.audio.metadata', 'tensorboard.util.lazy_tensor_creator', 'tensorboard.plugins.audio.summary_v2', 'tensorboard.plugins.audio.summary', 'tensorboard.plugins.custom_scalar', 'tensorboard.plugins.custom_scalar.layout_pb2', 'tensorboard.plugins.custom_scalar.metadata', 'tensorboard.plugins.custom_scalar.summary', 'tensorboard.plugins.histogram', 'tensorboard.plugins.histogram.plugin_data_pb2', 'tensorboard.plugins.histogram.metadata', 'tensorboard.compat.proto.cost_graph_pb2', 'tensorboard.compat.proto.attr_value_pb2', 'tensorboard.compat.proto.node_def_pb2', 'tensorboard.compat.proto.full_type_pb2', 'tensorboard.compat.proto.op_def_pb2', 'tensorboard.compat.proto.function_pb2', 'tensorboard.compat.proto.versions_pb2', 'tensorboard.compat.proto.graph_pb2', 'tensorboard.compat.proto.allocation_description_pb2', 'tensorboard.compat.proto.tensor_description_pb2', 'tensorboard.compat.proto.step_stats_pb2', 'tensorboard.compat.proto.cluster_pb2', 'tensorboard.compat.proto.debug_pb2', 'tensorboard.compat.proto.verifier_config_pb2', 'tensorboard.compat.proto.rewriter_config_pb2', 'tensorboard.compat.proto.config_pb2', 'tensorboard.compat.proto.event_pb2', 'tensorboard.compat.proto.variable_pb2', 'tensorboard.compat.proto.struct_pb2', 'tensorboard.compat.proto.trackable_object_graph_pb2', 'tensorboard.compat.proto.saved_object_graph_pb2', 'tensorboard.compat.proto.saver_pb2', 'tensorboard.compat.proto.meta_graph_pb2', 'tensorboard.compat.tensorflow_stub.error_codes', 'tensorboard.compat.tensorflow_stub.errors', 'tensorboard.compat.tensorflow_stub.compat.v1', 'tensorboard.compat.tensorflow_stub.compat', 'tensorboard.compat.tensorflow_stub.io.gfile', 'tensorboard.compat.tensorflow_stub.io', 'tensorboard.compat.tensorflow_stub.pywrap_tensorflow', 'tensorboard.compat.tensorflow_stub.dtypes', 'tensorboard.compat.tensorflow_stub.flags', 'tensorboard.compat.tensorflow_stub.app', 'tensorboard.compat.tensorflow_stub.tensor_shape', 'tensorboard.compat.tensorflow_stub', 'tensorboard.util.tensor_util', 'tensorboard.plugins.histogram.summary_v2', 'tensorboard.plugins.histogram.summary', 'tensorboard.plugins.image', 'tensorboard.plugins.image.plugin_data_pb2', 'tensorboard.plugins.image.metadata', 'tensorboard.plugins.image.summary_v2', 'tensorboard.plugins.image.summary', 'tensorboard.plugins.pr_curve', 'tensorboard.plugins.pr_curve.plugin_data_pb2', 'tensorboard.plugins.pr_curve.metadata', 'tensorboard.plugins.pr_curve.summary', 'tensorboard.plugins.scalar', 'tensorboard.plugins.scalar.plugin_data_pb2', 'tensorboard.plugins.scalar.metadata', 'tensorboard.plugins.scalar.summary_v2', 'tensorboard.plugins.scalar.summary', 'tensorboard.plugins.text', 'tensorboard.plugins.text.plugin_data_pb2', 'tensorboard.plugins.text.metadata', 'tensorboard.plugins.text.summary_v2', 'tensorboard.plugins.text.summary', 'tensorboard.summary.v1', 'tensorboard.summary.v2', 'tensorboard.summary.writer', 'tensorboard.summary.writer.record_writer', 'tensorboard.summary.writer.event_file_writer', 'tensorboard.summary._output', 'tensorboard.summary._writer', 'tensorboard.summary', 'tensorboard.summary._tf', 'tensorboard.summary._tf.summary', 'tensorflow.python.keras.api._v2.keras.activations', 'tensorflow.python.keras.api._v2.keras.applications.densenet', 'tensorflow.python.keras.api._v2.keras.applications.efficientnet', 'tensorflow.python.keras.api._v2.keras.applications.imagenet_utils', 'tensorflow.python.keras.api._v2.keras.applications.inception_resnet_v2', 'tensorflow.python.keras.api._v2.keras.applications.inception_v3', 'tensorflow.python.keras.api._v2.keras.applications.mobilenet', 'tensorflow.python.keras.api._v2.keras.applications.mobilenet_v2', 'tensorflow.python.keras.api._v2.keras.applications.mobilenet_v3', 'tensorflow.python.keras.api._v2.keras.applications.nasnet', 'tensorflow.python.keras.api._v2.keras.applications.resnet', 'tensorflow.python.keras.api._v2.keras.applications.resnet50', 'tensorflow.python.keras.api._v2.keras.applications.resnet_v2', 'tensorflow.python.keras.api._v2.keras.applications.vgg16', 'tensorflow.python.keras.api._v2.keras.applications.vgg19', 'tensorflow.python.keras.api._v2.keras.applications.xception', 'tensorflow.python.keras.api._v2.keras.applications', 'tensorflow.python.keras.api._v2.keras.backend', 'tensorflow.python.keras.api._v2.keras.callbacks.experimental', 'tensorflow.python.keras.api._v2.keras.callbacks', 'tensorflow.python.keras.api._v2.keras.constraints', 'tensorflow.python.keras.api._v2.keras.datasets.boston_housing', 'tensorflow.python.keras.api._v2.keras.datasets.cifar10', 'tensorflow.python.keras.api._v2.keras.datasets.cifar100', 'tensorflow.python.keras.api._v2.keras.datasets.fashion_mnist', 'tensorflow.python.keras.api._v2.keras.datasets.imdb', 'tensorflow.python.keras.api._v2.keras.datasets.mnist', 'tensorflow.python.keras.api._v2.keras.datasets.reuters', 'tensorflow.python.keras.api._v2.keras.datasets', 'tensorflow.python.keras.api._v2.keras.estimator', 'tensorflow.python.keras.api._v2.keras.experimental', 'tensorflow.python.keras.api._v2.keras.initializers', 'tensorflow.python.keras.api._v2.keras.layers.experimental.preprocessing', 'tensorflow.python.keras.api._v2.keras.layers.experimental', 'tensorflow.python.keras.api._v2.keras.layers', 'tensorflow.python.keras.api._v2.keras.losses', 'tensorflow.python.keras.api._v2.keras.metrics', 'tensorflow.python.keras.mixed_precision.get_layer_policy', 'tensorflow.python.keras.api._v2.keras.mixed_precision.experimental', 'tensorflow.python.keras.api._v2.keras.mixed_precision', 'tensorflow.python.keras.api._v2.keras.models', 'tensorflow.python.keras.api._v2.keras.optimizers.schedules', 'tensorflow.python.keras.api._v2.keras.optimizers', 'tensorflow.python.keras.api._v2.keras.preprocessing.image', 'tensorflow.python.keras.api._v2.keras.preprocessing.sequence', 'tensorflow.python.keras.api._v2.keras.preprocessing.text', 'tensorflow.python.keras.api._v2.keras.preprocessing', 'tensorflow.python.keras.api._v2.keras.regularizers', 'tensorflow.python.keras.api._v2.keras.utils.experimental', 'tensorflow.python.keras.api._v2.keras.utils', 'tensorflow.python.keras.api._v2.keras.wrappers.scikit_learn', 'tensorflow.python.keras.api._v2.keras.wrappers', 'tensorflow.python.keras.api._v2.keras', 'tensorflow.python.keras.api._v2', 'tensorflow._api.v2.compat.v2.compat.v2', 'tensorflow._api.v2.compat.v2.compat', 'tensorflow._api.v2.compat.v2', 'tensorflow._api.v2.compat.v1.compat.v2', 'tensorflow._api.v2.compat.v1.compat', 'tensorflow._api.v2.compat.v1', 'tensorflow._api.v2.compat', 'tensorflow._api.v2.config.experimental', 'tensorflow._api.v2.config.optimizer', 'tensorflow._api.v2.config.threading', 'tensorflow._api.v2.config', 'tensorflow._api.v2.data.experimental.service', 'tensorflow._api.v2.data.experimental', 'tensorflow._api.v2.data', 'tensorflow._api.v2.debugging.experimental', 'tensorflow._api.v2.debugging', 'tensorflow._api.v2.distribute.cluster_resolver', 'tensorflow._api.v2.distribute.experimental.coordinator', 'tensorflow._api.v2.distribute.experimental.partitioners', 'tensorflow._api.v2.distribute.experimental', 'tensorflow._api.v2.distribute', 'tensorflow._api.v2.dtypes', 'tensorflow._api.v2.errors', 'tensorflow._api.v2.experimental.dlpack', 'tensorflow._api.v2.experimental.numpy.random', 'tensorflow._api.v2.experimental.numpy', 'tensorflow._api.v2.experimental.tensorrt', 'tensorflow._api.v2.experimental', 'tensorflow._api.v2.feature_column', 'tensorflow._api.v2.graph_util', 'tensorflow._api.v2.image', 'tensorflow._api.v2.io.gfile', 'tensorflow._api.v2.io', 'tensorflow._api.v2.linalg.experimental', 'tensorflow._api.v2.linalg', 'tensorflow._api.v2.lite.experimental', 'tensorflow._api.v2.lite', 'tensorflow._api.v2.lookup.experimental', 'tensorflow._api.v2.lookup', 'tensorflow._api.v2.math.special', 'tensorflow._api.v2.math', 'tensorflow._api.v2.mixed_precision.experimental', 'tensorflow._api.v2.mixed_precision', 'tensorflow._api.v2.mlir.experimental', 'tensorflow._api.v2.mlir', 'tensorflow._api.v2.nest', 'tensorflow._api.v2.nn', 'tensorflow._api.v2.profiler.experimental.client', 'tensorflow._api.v2.profiler.experimental.server', 'tensorflow._api.v2.profiler.experimental', 'tensorflow._api.v2.profiler', 'tensorflow._api.v2.quantization', 'tensorflow._api.v2.queue', 'tensorflow._api.v2.ragged', 'tensorflow._api.v2.random.experimental', 'tensorflow._api.v2.random', 'tensorflow._api.v2.raw_ops', 'tensorflow._api.v2.saved_model.experimental', 'tensorflow._api.v2.saved_model', 'tensorflow._api.v2.sets', 'tensorflow._api.v2.signal', 'tensorflow._api.v2.sparse', 'tensorflow._api.v2.strings', 'tensorflow._api.v2.summary.experimental', 'tensorflow._api.v2.summary', 'tensorflow._api.v2.sysconfig', 'tensorflow._api.v2.test', 'tensorflow._api.v2.tpu.experimental.embedding', 'tensorflow._api.v2.tpu.experimental', 'tensorflow._api.v2.tpu', 'tensorflow._api.v2.train.experimental', 'tensorflow._api.v2.train', 'tensorflow._api.v2.types.experimental', 'tensorflow._api.v2.types', 'tensorflow._api.v2.version', 'tensorflow._api.v2.xla.experimental', 'tensorflow._api.v2.xla', 'tensorflow.keras.activations', 'tensorflow.keras.applications.densenet', 'tensorflow.keras.applications.efficientnet', 'tensorflow.keras.applications.imagenet_utils', 'tensorflow.keras.applications.inception_resnet_v2', 'tensorflow.keras.applications.inception_v3', 'tensorflow.keras.applications.mobilenet', 'tensorflow.keras.applications.mobilenet_v2', 'tensorflow.keras.applications.mobilenet_v3', 'tensorflow.keras.applications.nasnet', 'tensorflow.keras.applications.resnet', 'tensorflow.keras.applications.resnet50', 'tensorflow.keras.applications.resnet_v2', 'tensorflow.keras.applications.vgg16', 'tensorflow.keras.applications.vgg19', 'tensorflow.keras.applications.xception', 'tensorflow.keras.applications', 'tensorflow.keras.backend', 'tensorflow.keras.callbacks.experimental', 'tensorflow.keras.callbacks', 'tensorflow.keras.constraints', 'tensorflow.keras.datasets.boston_housing', 'tensorflow.keras.datasets.cifar10', 'tensorflow.keras.datasets.cifar100', 'tensorflow.keras.datasets.fashion_mnist', 'tensorflow.keras.datasets.imdb', 'tensorflow.keras.datasets.mnist', 'tensorflow.keras.datasets.reuters', 'tensorflow.keras.datasets', 'tensorflow.keras.estimator', 'tensorflow.keras.experimental', 'tensorflow.keras.initializers', 'tensorflow.keras.layers.experimental.preprocessing', 'tensorflow.keras.layers.experimental', 'tensorflow.keras.layers', 'tensorflow.keras.losses', 'tensorflow.keras.metrics', 'tensorflow.keras.mixed_precision.experimental', 'tensorflow.keras.mixed_precision', 'tensorflow.keras.models', 'tensorflow.keras.optimizers.schedules', 'tensorflow.keras.optimizers', 'tensorflow.keras.preprocessing.image', 'tensorflow.keras.preprocessing.sequence', 'tensorflow.keras.preprocessing.text', 'tensorflow.keras.preprocessing', 'tensorflow.keras.regularizers', 'tensorflow.keras.utils.experimental', 'tensorflow.keras.utils', 'tensorflow.keras.wrappers.scikit_learn', 'tensorflow.keras.wrappers', 'tensorflow.keras', 'tensorflow', 'networks', 'visualizer', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
CACHEDIR=/Users/ho/.matplotlib
Using fontManager instance from /Users/ho/.matplotlib/fontlist-v330.json
Loaded backend macosx version unknown.
Loaded backend MacOSX version unknown.
Loaded backend agg version unknown.
[030200] RL:a2c Net:dnn LR:0.001 DF:0.9 TU:[3,33]
[030200][Epoch 001/100] Epsilon:1.0000 #Expl.:257/257 #Buy:126 #Sell:63 #Hold:68 #Stocks:1323 PV:98,811,729 LC:1 Loss:7.392779 ET:11.9813
[030200][Epoch 002/100] Epsilon:0.9091 #Expl.:228/257 #Buy:157 #Sell:49 #Hold:51 #Stocks:2042 PV:97,818,987 LC:1 Loss:7.099111 ET:10.3739
[030200][Epoch 003/100] Epsilon:0.8333 #Expl.:211/257 #Buy:148 #Sell:55 #Hold:54 #Stocks:1594 PV:98,787,106 LC:1 Loss:6.886898 ET:10.7311
[030200][Epoch 004/100] Epsilon:0.7692 #Expl.:197/257 #Buy:166 #Sell:42 #Hold:49 #Stocks:2108 PV:98,107,707 LC:1 Loss:6.775599 ET:11.4223
[030200][Epoch 005/100] Epsilon:0.7143 #Expl.:180/257 #Buy:162 #Sell:53 #Hold:42 #Stocks:1853 PV:98,768,797 LC:1 Loss:6.640434 ET:10.6452
[030200][Epoch 006/100] Epsilon:0.6667 #Expl.:174/257 #Buy:113 #Sell:57 #Hold:87 #Stocks:938 PV:100,352,201 LC:1 Loss:6.829609 ET:10.7562
[030200][Epoch 007/100] Epsilon:0.6250 #Expl.:155/257 #Buy:100 #Sell:48 #Hold:109 #Stocks:906 PV:99,578,200 LC:1 Loss:6.963093 ET:12.0664
[030200][Epoch 008/100] Epsilon:0.5882 #Expl.:150/257 #Buy:86 #Sell:37 #Hold:134 #Stocks:862 PV:99,481,906 LC:1 Loss:6.833336 ET:14.0094
[030200][Epoch 009/100] Epsilon:0.5556 #Expl.:151/257 #Buy:91 #Sell:37 #Hold:129 #Stocks:943 PV:98,997,923 LC:1 Loss:6.869450 ET:12.7832
[030200][Epoch 010/100] Epsilon:0.5263 #Expl.:139/257 #Buy:73 #Sell:34 #Hold:150 #Stocks:695 PV:99,671,808 LC:1 Loss:6.748822 ET:11.9682
findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Noto Sans Pahawh Hmong' (NotoSansPahawhHmong-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Pau Cin Hau' (NotoSansPauCinHau-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Miao' (NotoSansMiao-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Bassa Vah' (NotoSansBassaVah-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
findfont: score(<Font '.SF Compact' (SFCompactItalic.ttf) italic normal 1000 normal>) = 11.62
findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Nabataean' (NotoSansNabataean-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
findfont: score(<Font 'Noto Sans Marchen' (NotoSansMarchen-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Caucasian Albanian' (NotoSansCaucasianAlbanian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Mro' (NotoSansMro-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Takri' (NotoSansTakri-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Psalter Pahlavi' (NotoSansPsalterPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Sora Sompeng' (NotoSansSoraSompeng-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Adlam' (NotoSansAdlam-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Siddham' (NotoSansSiddham-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font '.SF Compact' (SFCompact.ttf) normal normal 1000 normal>) = 10.62
findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Noto Sans Multani' (NotoSansMultani-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old Permic' (NotoSansOldPermic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Warang Citi' (NotoSansWarangCiti-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Duployan' (NotoSansDuployan-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Linear A' (NotoSansLinearA-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tirhuta' (NotoSansTirhuta-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Sharada' (NotoSansSharada-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Mende Kikakui' (NotoSansMendeKikakui-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Osage' (NotoSansOsage-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
findfont: score(<Font 'Noto Sans Elbasan' (NotoSansElbasan-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Modi' (NotoSansModi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Khojki' (NotoSansKhojki-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Party LET' (PartyLET-plain.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 295 normal>) = 11.14975
findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Mahajani' (NotoSansMahajani-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Serif Ahom' (NotoSerifAhom-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old Hungarian' (NotoSansOldHungarian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Manichaean' (NotoSansManichaean-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Academy Engraved LET' (Academy Engraved LET Fonts.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Hatran' (NotoSansHatran-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.New York' (NewYork.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Hanifi Rohingya' (NotoSansHanifiRohingya-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Newa' (NotoSansNewa-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Noto Sans Bhaiksuki' (NotoSansBhaiksuki-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
findfont: score(<Font 'Noto Sans Meroitic' (NotoSansMeroitic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Wancho' (NotoSansWancho-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Khudawadi' (NotoSansKhudawadi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 295 normal>) = 10.14975
findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Palmyrene' (NotoSansPalmyrene-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old North Arabian' (NotoSansOldNorthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/opt/homebrew/Caskroom/miniforge/base/envs/ho/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Noto Sans Pahawh Hmong' (NotoSansPahawhHmong-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Pau Cin Hau' (NotoSansPauCinHau-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Miao' (NotoSansMiao-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Bassa Vah' (NotoSansBassaVah-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
findfont: score(<Font '.SF Compact' (SFCompactItalic.ttf) italic normal 1000 normal>) = 11.62
findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Nabataean' (NotoSansNabataean-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
findfont: score(<Font 'Noto Sans Marchen' (NotoSansMarchen-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Caucasian Albanian' (NotoSansCaucasianAlbanian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Mro' (NotoSansMro-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Takri' (NotoSansTakri-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Psalter Pahlavi' (NotoSansPsalterPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Sora Sompeng' (NotoSansSoraSompeng-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Adlam' (NotoSansAdlam-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Siddham' (NotoSansSiddham-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font '.SF Compact' (SFCompact.ttf) normal normal 1000 normal>) = 10.62
findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Noto Sans Multani' (NotoSansMultani-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old Permic' (NotoSansOldPermic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Warang Citi' (NotoSansWarangCiti-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Duployan' (NotoSansDuployan-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Linear A' (NotoSansLinearA-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tirhuta' (NotoSansTirhuta-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Sharada' (NotoSansSharada-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Mende Kikakui' (NotoSansMendeKikakui-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Osage' (NotoSansOsage-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
findfont: score(<Font 'Noto Sans Elbasan' (NotoSansElbasan-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Modi' (NotoSansModi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Khojki' (NotoSansKhojki-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Party LET' (PartyLET-plain.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 295 normal>) = 11.14975
findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Mahajani' (NotoSansMahajani-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Serif Ahom' (NotoSerifAhom-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old Hungarian' (NotoSansOldHungarian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Manichaean' (NotoSansManichaean-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Academy Engraved LET' (Academy Engraved LET Fonts.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Hatran' (NotoSansHatran-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.New York' (NewYork.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Hanifi Rohingya' (NotoSansHanifiRohingya-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Noto Sans Newa' (NotoSansNewa-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Noto Sans Bhaiksuki' (NotoSansBhaiksuki-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
findfont: score(<Font 'Noto Sans Meroitic' (NotoSansMeroitic-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Wancho' (NotoSansWancho-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Khudawadi' (NotoSansKhudawadi-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 295 normal>) = 10.14975
findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Palmyrene' (NotoSansPalmyrene-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noto Sans Old North Arabian' (NotoSansOldNorthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/opt/homebrew/Caskroom/miniforge/base/envs/ho/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
[030200][Epoch 011/100] Epsilon:0.5000 #Expl.:120/257 #Buy:85 #Sell:22 #Hold:150 #Stocks:1101 PV:99,177,074 LC:1 Loss:6.678686 ET:12.4277
[030200][Epoch 012/100] Epsilon:0.4762 #Expl.:125/257 #Buy:79 #Sell:29 #Hold:149 #Stocks:878 PV:99,759,327 LC:1 Loss:6.687796 ET:12.3672
[030200][Epoch 013/100] Epsilon:0.4545 #Expl.:121/257 #Buy:100 #Sell:27 #Hold:130 #Stocks:1301 PV:99,267,064 LC:1 Loss:6.528566 ET:12.2342
[030200][Epoch 014/100] Epsilon:0.4348 #Expl.:105/257 #Buy:87 #Sell:21 #Hold:149 #Stocks:1189 PV:99,245,016 LC:1 Loss:6.481515 ET:12.1440
[030200][Epoch 015/100] Epsilon:0.4167 #Expl.:104/257 #Buy:93 #Sell:29 #Hold:135 #Stocks:1195 PV:99,161,062 LC:1 Loss:6.434855 ET:12.3579
[030200][Epoch 016/100] Epsilon:0.4000 #Expl.:111/257 #Buy:122 #Sell:32 #Hold:103 #Stocks:1658 PV:98,880,014 LC:1 Loss:6.313354 ET:12.5636
[030200][Epoch 017/100] Epsilon:0.3846 #Expl.:96/257 #Buy:110 #Sell:26 #Hold:121 #Stocks:1563 PV:98,980,310 LC:1 Loss:6.332626 ET:12.7095
[030200][Epoch 018/100] Epsilon:0.3704 #Expl.:82/257 #Buy:91 #Sell:42 #Hold:124 #Stocks:900 PV:100,195,208 LC:1 Loss:6.231102 ET:13.4549
[030200][Epoch 019/100] Epsilon:0.3571 #Expl.:104/257 #Buy:94 #Sell:38 #Hold:125 #Stocks:1112 PV:99,065,783 LC:1 Loss:6.228247 ET:12.0516
[030200][Epoch 020/100] Epsilon:0.3448 #Expl.:81/257 #Buy:89 #Sell:37 #Hold:131 #Stocks:977 PV:100,203,574 LC:1 Loss:6.124070 ET:10.6803
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
[030200][Epoch 021/100] Epsilon:0.3333 #Expl.:97/257 #Buy:104 #Sell:33 #Hold:120 #Stocks:1369 PV:100,156,966 LC:1 Loss:6.028289 ET:10.4632
[030200][Epoch 022/100] Epsilon:0.3226 #Expl.:73/257 #Buy:77 #Sell:53 #Hold:127 #Stocks:442 PV:100,710,874 LC:1 Loss:6.152227 ET:10.5660
[030200][Epoch 023/100] Epsilon:0.3125 #Expl.:83/257 #Buy:90 #Sell:19 #Hold:148 #Stocks:1414 PV:99,303,324 LC:1 Loss:6.039577 ET:10.7067
[030200][Epoch 024/100] Epsilon:0.3030 #Expl.:94/257 #Buy:102 #Sell:45 #Hold:110 #Stocks:1096 PV:100,974,638 LC:1 Loss:5.917690 ET:10.9403
[030200][Epoch 025/100] Epsilon:0.2941 #Expl.:79/257 #Buy:117 #Sell:28 #Hold:112 #Stocks:1773 PV:99,096,217 LC:1 Loss:5.940873 ET:10.7921
[030200][Epoch 026/100] Epsilon:0.2857 #Expl.:80/257 #Buy:112 #Sell:27 #Hold:118 #Stocks:1693 PV:99,342,098 LC:1 Loss:5.837424 ET:10.8078
[030200][Epoch 027/100] Epsilon:0.2778 #Expl.:75/257 #Buy:84 #Sell:49 #Hold:124 #Stocks:658 PV:100,258,777 LC:1 Loss:6.028969 ET:10.7372
[030200][Epoch 028/100] Epsilon:0.2703 #Expl.:76/257 #Buy:115 #Sell:20 #Hold:122 #Stocks:1939 PV:99,003,652 LC:1 Loss:5.806521 ET:10.5812
[030200][Epoch 029/100] Epsilon:0.2632 #Expl.:64/257 #Buy:117 #Sell:30 #Hold:110 #Stocks:1770 PV:99,049,052 LC:1 Loss:5.800592 ET:10.7506
[030200][Epoch 030/100] Epsilon:0.2564 #Expl.:68/257 #Buy:121 #Sell:25 #Hold:111 #Stocks:1975 PV:99,216,301 LC:1 Loss:5.753182 ET:11.2788
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
[030200][Epoch 031/100] Epsilon:0.2500 #Expl.:46/257 #Buy:88 #Sell:19 #Hold:150 #Stocks:1385 PV:100,417,175 LC:1 Loss:5.610927 ET:12.1964
[030200][Epoch 032/100] Epsilon:0.2439 #Expl.:68/257 #Buy:72 #Sell:53 #Hold:132 #Stocks:350 PV:100,594,888 LC:1 Loss:5.740238 ET:11.1311
[030200][Epoch 033/100] Epsilon:0.2381 #Expl.:63/257 #Buy:126 #Sell:12 #Hold:119 #Stocks:2387 PV:98,382,844 LC:1 Loss:5.517631 ET:11.5613
[030200][Epoch 034/100] Epsilon:0.2326 #Expl.:66/257 #Buy:127 #Sell:18 #Hold:112 #Stocks:2297 PV:98,493,987 LC:1 Loss:5.611953 ET:10.8616
[030200][Epoch 035/100] Epsilon:0.2273 #Expl.:57/257 #Buy:167 #Sell:12 #Hold:78 #Stocks:3213 PV:96,890,352 LC:1 Loss:5.397483 ET:10.7795
[030200][Epoch 036/100] Epsilon:0.2222 #Expl.:60/257 #Buy:142 #Sell:27 #Hold:88 #Stocks:2399 PV:98,328,381 LC:1 Loss:5.576845 ET:11.0602
[030200][Epoch 037/100] Epsilon:0.2174 #Expl.:51/257 #Buy:169 #Sell:14 #Hold:74 #Stocks:3235 PV:97,605,620 LC:1 Loss:5.418985 ET:11.5058
[030200][Epoch 038/100] Epsilon:0.2128 #Expl.:54/257 #Buy:170 #Sell:31 #Hold:56 #Stocks:2838 PV:99,912,514 LC:1 Loss:5.345105 ET:11.1785
[030200][Epoch 039/100] Epsilon:0.2083 #Expl.:50/257 #Buy:109 #Sell:43 #Hold:105 #Stocks:1172 PV:101,427,056 LC:1 Loss:5.453461 ET:10.8146
[030200][Epoch 040/100] Epsilon:0.2041 #Expl.:56/257 #Buy:36 #Sell:35 #Hold:186 #Stocks:54 PV:99,750,925 LC:1 Loss:5.831941 ET:10.5561
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
[030200][Epoch 041/100] Epsilon:0.2000 #Expl.:56/257 #Buy:156 #Sell:14 #Hold:87 #Stocks:3149 PV:94,954,589 LC:1 Loss:5.140712 ET:10.6619
[030200][Epoch 042/100] Epsilon:0.1961 #Expl.:50/257 #Buy:164 #Sell:14 #Hold:79 #Stocks:3152 PV:95,060,729 LC:1 Loss:4.902299 ET:11.4341
[030200][Epoch 043/100] Epsilon:0.1923 #Expl.:47/257 #Buy:164 #Sell:23 #Hold:70 #Stocks:2967 PV:98,019,070 LC:1 Loss:5.087694 ET:10.9986
[030200][Epoch 044/100] Epsilon:0.1887 #Expl.:48/257 #Buy:33 #Sell:34 #Hold:190 #Stocks:15 PV:99,682,684 LC:1 Loss:5.539141 ET:11.1997
[030200][Epoch 045/100] Epsilon:0.1852 #Expl.:48/257 #Buy:149 #Sell:8 #Hold:100 #Stocks:3144 PV:94,797,520 LC:1 Loss:4.671929 ET:10.9852
[030200][Epoch 046/100] Epsilon:0.1818 #Expl.:49/257 #Buy:161 #Sell:11 #Hold:85 #Stocks:3150 PV:94,977,565 LC:1 Loss:4.609045 ET:11.0317
[030200][Epoch 047/100] Epsilon:0.1786 #Expl.:47/257 #Buy:161 #Sell:16 #Hold:80 #Stocks:3208 PV:96,781,928 LC:1 Loss:5.080568 ET:10.8485
[030200][Epoch 048/100] Epsilon:0.1754 #Expl.:49/257 #Buy:167 #Sell:10 #Hold:80 #Stocks:3164 PV:95,396,766 LC:1 Loss:4.833449 ET:10.5183
[030200][Epoch 049/100] Epsilon:0.1724 #Expl.:24/257 #Buy:152 #Sell:4 #Hold:101 #Stocks:3124 PV:94,216,174 LC:1 Loss:4.546465 ET:10.6879
[030200][Epoch 050/100] Epsilon:0.1695 #Expl.:44/257 #Buy:167 #Sell:14 #Hold:76 #Stocks:3183 PV:95,991,262 LC:1 Loss:4.725279 ET:10.6431
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
[030200][Epoch 051/100] Epsilon:0.1667 #Expl.:41/257 #Buy:161 #Sell:10 #Hold:86 #Stocks:3157 PV:95,189,021 LC:1 Loss:4.671621 ET:10.7028
[030200][Epoch 052/100] Epsilon:0.1639 #Expl.:55/257 #Buy:160 #Sell:27 #Hold:70 #Stocks:2700 PV:98,355,872 LC:1 Loss:5.092096 ET:11.6541
[030200][Epoch 053/100] Epsilon:0.1613 #Expl.:36/257 #Buy:23 #Sell:22 #Hold:212 #Stocks:30 PV:99,879,749 LC:1 Loss:5.244312 ET:11.2206
[030200][Epoch 054/100] Epsilon:0.1587 #Expl.:44/257 #Buy:159 #Sell:11 #Hold:87 #Stocks:3171 PV:95,607,598 LC:1 Loss:4.424256 ET:11.2423
[030200][Epoch 055/100] Epsilon:0.1562 #Expl.:43/257 #Buy:162 #Sell:8 #Hold:87 #Stocks:3160 PV:95,279,810 LC:1 Loss:4.254387 ET:10.6869
[030200][Epoch 056/100] Epsilon:0.1538 #Expl.:50/257 #Buy:135 #Sell:20 #Hold:102 #Stocks:2239 PV:98,945,460 LC:1 Loss:4.707897 ET:10.7383
[030200][Epoch 057/100] Epsilon:0.1515 #Expl.:41/257 #Buy:179 #Sell:13 #Hold:65 #Stocks:3204 PV:96,627,062 LC:1 Loss:4.425524 ET:10.6051
[030200][Epoch 058/100] Epsilon:0.1493 #Expl.:32/257 #Buy:157 #Sell:10 #Hold:90 #Stocks:3142 PV:94,744,292 LC:1 Loss:4.305564 ET:11.1417
[030200][Epoch 059/100] Epsilon:0.1471 #Expl.:38/257 #Buy:165 #Sell:9 #Hold:83 #Stocks:3142 PV:94,760,288 LC:1 Loss:4.247369 ET:11.1669
[030200][Epoch 060/100] Epsilon:0.1449 #Expl.:38/257 #Buy:166 #Sell:10 #Hold:81 #Stocks:3196 PV:96,381,505 LC:1 Loss:4.437172 ET:11.6035
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
[030200][Epoch 061/100] Epsilon:0.1429 #Expl.:33/257 #Buy:151 #Sell:8 #Hold:98 #Stocks:3114 PV:93,906,398 LC:1 Loss:4.344752 ET:10.6499
[030200][Epoch 062/100] Epsilon:0.1408 #Expl.:36/257 #Buy:32 #Sell:32 #Hold:193 #Stocks:47 PV:99,864,192 LC:1 Loss:5.529753 ET:11.3927
[030200][Epoch 063/100] Epsilon:0.1389 #Expl.:41/257 #Buy:161 #Sell:9 #Hold:87 #Stocks:3143 PV:94,770,172 LC:1 Loss:4.122014 ET:11.0242
[030200][Epoch 064/100] Epsilon:0.1370 #Expl.:38/257 #Buy:169 #Sell:9 #Hold:79 #Stocks:3183 PV:95,981,144 LC:1 Loss:4.202537 ET:10.7049
[030200][Epoch 065/100] Epsilon:0.1351 #Expl.:26/257 #Buy:159 #Sell:6 #Hold:92 #Stocks:3224 PV:97,231,457 LC:1 Loss:4.260604 ET:10.7844
[030200][Epoch 066/100] Epsilon:0.1333 #Expl.:36/257 #Buy:172 #Sell:11 #Hold:74 #Stocks:3162 PV:95,349,843 LC:1 Loss:4.162897 ET:11.1041
[030200][Epoch 067/100] Epsilon:0.1316 #Expl.:40/257 #Buy:46 #Sell:45 #Hold:166 #Stocks:3 PV:100,303,439 LC:1 Loss:4.730817 ET:10.7457
[030200][Epoch 068/100] Epsilon:0.1299 #Expl.:34/257 #Buy:26 #Sell:21 #Hold:210 #Stocks:94 PV:99,831,006 LC:1 Loss:4.792496 ET:10.9179
[030200][Epoch 069/100] Epsilon:0.1282 #Expl.:25/257 #Buy:153 #Sell:9 #Hold:95 #Stocks:3138 PV:94,630,151 LC:1 Loss:3.952800 ET:10.6679
[030200][Epoch 070/100] Epsilon:0.1266 #Expl.:29/257 #Buy:22 #Sell:22 #Hold:213 #Stocks:32 PV:99,955,272 LC:1 Loss:4.580150 ET:10.9766
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
[030200][Epoch 071/100] Epsilon:0.1250 #Expl.:34/257 #Buy:142 #Sell:6 #Hold:109 #Stocks:3186 PV:96,071,405 LC:1 Loss:4.372781 ET:11.1561
[030200][Epoch 072/100] Epsilon:0.1235 #Expl.:34/257 #Buy:162 #Sell:15 #Hold:80 #Stocks:3145 PV:94,837,329 LC:1 Loss:3.874846 ET:11.0317
[030200][Epoch 073/100] Epsilon:0.1220 #Expl.:34/257 #Buy:64 #Sell:21 #Hold:172 #Stocks:741 PV:100,128,763 LC:1 Loss:4.151619 ET:11.3967
[030200][Epoch 074/100] Epsilon:0.1205 #Expl.:34/257 #Buy:154 #Sell:7 #Hold:96 #Stocks:3131 PV:94,413,019 LC:1 Loss:3.715843 ET:11.1913
[030200][Epoch 075/100] Epsilon:0.1190 #Expl.:32/257 #Buy:20 #Sell:20 #Hold:217 #Stocks:28 PV:99,956,129 LC:1 Loss:4.475996 ET:10.8105
[030200][Epoch 076/100] Epsilon:0.1176 #Expl.:28/257 #Buy:150 #Sell:10 #Hold:97 #Stocks:3127 PV:94,299,800 LC:1 Loss:3.741279 ET:11.3596
[030200][Epoch 077/100] Epsilon:0.1163 #Expl.:28/257 #Buy:161 #Sell:4 #Hold:92 #Stocks:3148 PV:94,925,403 LC:1 Loss:3.518155 ET:11.0908
[030200][Epoch 078/100] Epsilon:0.1149 #Expl.:32/257 #Buy:61 #Sell:16 #Hold:180 #Stocks:791 PV:100,075,424 LC:1 Loss:3.982913 ET:10.9592
[030200][Epoch 079/100] Epsilon:0.1136 #Expl.:19/257 #Buy:154 #Sell:5 #Hold:98 #Stocks:3145 PV:94,845,313 LC:1 Loss:3.510703 ET:10.8144
[030200][Epoch 080/100] Epsilon:0.1124 #Expl.:22/257 #Buy:166 #Sell:10 #Hold:81 #Stocks:3153 PV:95,066,961 LC:1 Loss:3.425144 ET:11.5821
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
[030200][Epoch 081/100] Epsilon:0.1111 #Expl.:27/257 #Buy:165 #Sell:7 #Hold:85 #Stocks:3158 PV:95,224,024 LC:1 Loss:3.525007 ET:11.4641
[030200][Epoch 082/100] Epsilon:0.1099 #Expl.:37/257 #Buy:107 #Sell:12 #Hold:138 #Stocks:1774 PV:100,341,971 LC:1 Loss:4.020751 ET:11.2987
[030200][Epoch 083/100] Epsilon:0.1087 #Expl.:18/257 #Buy:155 #Sell:6 #Hold:96 #Stocks:3139 PV:94,646,689 LC:1 Loss:3.328679 ET:11.6849
[030200][Epoch 084/100] Epsilon:0.1075 #Expl.:31/257 #Buy:162 #Sell:8 #Hold:87 #Stocks:3161 PV:95,314,265 LC:1 Loss:3.497080 ET:11.0286
[030200][Epoch 085/100] Epsilon:0.1064 #Expl.:29/257 #Buy:153 #Sell:5 #Hold:99 #Stocks:3149 PV:94,957,463 LC:1 Loss:3.481074 ET:10.7800
[030200][Epoch 086/100] Epsilon:0.1053 #Expl.:33/257 #Buy:162 #Sell:6 #Hold:89 #Stocks:3162 PV:95,334,535 LC:1 Loss:3.254139 ET:11.5021
[030200][Epoch 087/100] Epsilon:0.1042 #Expl.:26/257 #Buy:161 #Sell:10 #Hold:86 #Stocks:3022 PV:97,869,256 LC:1 Loss:3.881570 ET:10.7219
[030200][Epoch 088/100] Epsilon:0.1031 #Expl.:30/257 #Buy:156 #Sell:7 #Hold:94 #Stocks:3141 PV:94,729,646 LC:1 Loss:3.359849 ET:10.7410
[030200][Epoch 089/100] Epsilon:0.1020 #Expl.:13/257 #Buy:148 #Sell:2 #Hold:107 #Stocks:3183 PV:95,975,370 LC:1 Loss:3.568108 ET:11.3201
[030200][Epoch 090/100] Epsilon:0.1010 #Expl.:26/257 #Buy:149 #Sell:6 #Hold:102 #Stocks:3127 PV:94,297,521 LC:1 Loss:3.443228 ET:10.9425
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
[030200][Epoch 091/100] Epsilon:0.1000 #Expl.:32/257 #Buy:96 #Sell:8 #Hold:153 #Stocks:1203 PV:100,232,169 LC:1 Loss:5.502077 ET:10.8898
[030200][Epoch 092/100] Epsilon:0.0990 #Expl.:27/257 #Buy:110 #Sell:11 #Hold:136 #Stocks:3206 PV:96,688,054 LC:1 Loss:3.546956 ET:10.9209
[030200][Epoch 093/100] Epsilon:0.0980 #Expl.:27/257 #Buy:13 #Sell:7 #Hold:237 #Stocks:20 PV:100,064,120 LC:1 Loss:6.518149 ET:10.6150
[030200][Epoch 094/100] Epsilon:0.0971 #Expl.:18/257 #Buy:18 #Sell:18 #Hold:221 #Stocks:17 PV:100,148,726 LC:1 Loss:6.031144 ET:11.2051
[030200][Epoch 095/100] Epsilon:0.0962 #Expl.:27/257 #Buy:129 #Sell:8 #Hold:120 #Stocks:3146 PV:94,861,112 LC:1 Loss:3.505082 ET:10.8971
[030200][Epoch 096/100] Epsilon:0.0952 #Expl.:22/257 #Buy:13 #Sell:5 #Hold:239 #Stocks:46 PV:99,897,191 LC:1 Loss:6.626889 ET:10.4254
[030200][Epoch 097/100] Epsilon:0.0943 #Expl.:32/257 #Buy:113 #Sell:10 #Hold:134 #Stocks:3188 PV:96,125,062 LC:1 Loss:3.606188 ET:10.3343
[030200][Epoch 098/100] Epsilon:0.0935 #Expl.:28/257 #Buy:18 #Sell:2 #Hold:237 #Stocks:68 PV:99,954,050 LC:1 Loss:6.216277 ET:10.7944
[030200][Epoch 099/100] Epsilon:0.0926 #Expl.:20/257 #Buy:25 #Sell:24 #Hold:208 #Stocks:16 PV:100,095,416 LC:1 Loss:5.273636 ET:10.9942
[030200][Epoch 100/100] Epsilon:0.0000 #Expl.:0/257 #Buy:140 #Sell:0 #Hold:117 #Stocks:3153 PV:95,073,654 LC:1 Loss:3.408105 ET:11.0069
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
top of axes not in the figure, so title not moved
[030200] Elapsed Time:1123.9922 Max PV:101,427,056 #Win:18
Creating converter from 5 to 3
